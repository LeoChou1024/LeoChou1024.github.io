<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android- Fragment 切換頁面時會造成頁面重疊</title>
    <url>/2016/09/04/Android-Fragment-%E5%88%87%E6%8F%9B%E9%A0%81%E9%9D%A2%E6%99%82%E6%9C%83%E9%80%A0%E6%88%90%E9%A0%81%E9%9D%A2%E9%87%8D%E7%96%8A/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一回我們有說到在針對頁面切換時，會使用replace來進行切換</p>
<p>但是如果使用太多卻會造成頁面重疊..</p>
<p>由於筆者今天在撰寫程式時，發現自己常用的Replace居然沒辦法將前一個頁面成功至換掉</p>
<p>導致新的頁面內容重疊在原來的顯示內容上</p>
<span id="more"></span>
<p>搞了半天發現問題仍然無法解決..</p>
<p>後來與實驗室的學長討論後才發現，原來Replace並不能隨便亂用</p>
<p>當頁面的層數大於等於4的時候，就會造成頁面重疊的情況發生。</p>
<p>後來看了一下官網的文件才發現到：</p>
<p>官方文件中解釋說：<code>replace()</code>這個方法只是在上一個Fragment不再需要時採用的簡便方法。<br>正確的切換方式是<code>add()</code>，切換時<code>hide()</code>，<code>add()</code>另一個Fragment；再次切換時，只需<code>hide()</code>當前，<code>show()</code>另一個。<br>這樣就能做到多個Fragment切換不重新實體化。</p>
<p>範例程式碼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FragmentTransaction transaction = getActivity().getSupportFragmentManager().beginTransaction();</span><br><span class="line">            transaction.addToBackStack(null);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            if (!Detail.newInstance().isAdded()) &#123;	// 先判断是否被add過 如果沒有Add過 代表是第一次呼叫 則需要先add 其餘時候都直接使用show進行顯示</span><br><span class="line">                // hide裡面放的是自己當前所在的Fragment頁面，後面一定要.this才能夠指向現在要隱藏的頁面，否則會直接幫你生成一個新的頁面</span><br><span class="line">                transaction.hide(DataList.this).add(R.id.Content, detail).commitAllowingStateLoss(); // 隱藏當前頁面 並新增明細頁面</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                transaction.hide(DataList.this).show(detail).commitAllowingStateLoss(); //隱藏當前頁面 呼叫明細頁面</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>另外補充一點：</p>
<p>即使頁面不透過<code>isAdded()</code>來判斷是否為第一次載入，直接使用也可以達到切換的效果，<code>.show()</code>只是App在執行時，生命週期會比Add時還要來得短暫。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Fragment</tag>
      </tags>
  </entry>
  <entry>
    <title>Android- Fragment 基本介紹</title>
    <url>/2016/09/03/Android-Fragment-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在撰寫Android時，一定都會需要用到換頁的技巧</p>
<p>但是在使用換頁時，可能初學都會習慣先使用Intent來進行頁面的跳轉 (我第一次寫Android Watch的時候好像也是這樣~)</p>
<p>但是用久了的時候卻會發現到：假設如果今天自己的App有一個客製化的Title 以及Bottom Bar時，會發現每一次都需要將重複的Style程式碼複製貼上來進行設計</p>
<p>因此本篇會來介紹該如何解決這個問題</p>
<span id="more"></span>
<p>Google 在Android 3.0時，研發了一種名為Fragment的功能，只需要將你程式碼的某一區塊定義為Fragment後，就可以只針對這個區塊進行抽換（有點類似 Ajax）</p>
<p>而在使用上來說其實滿簡單的</p>
<p>首先在自己的Activity頁面定義出一塊空的Layout(一定要是空的！否則你的程式碼將會無法被替換掉)</p>
<p>接著在Layout的資料夾中New一個Fragment作為我們的抽換頁面</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/c5d87a90-bdbb-47bd-8e62-859c6c4314a2/1472992022_82103.png"></p>
<p>接著就可以在自己的程式碼中的OnCreate中加上抽換的程式碼，如此一來就可以在畫面載入時跳轉到自己的其它頁面去了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FragmentTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> getSupportFragmentManager().beginTransaction();</span><br><span class="line">        transaction.replace(R.id.Content, <span class="string">&quot;你新建立好的Fragment&quot;</span>;</span><br><span class="line">        transaction.commitAllowingStateLoss(); <span class="comment">//這行一定要加，目的是要讓transaction能夠真正送出</span></span><br></pre></td></tr></table></figure>
<p>第三行的Commit 如果是從某一個Fragment切換到其他Fragment的話，一定要改為以下程式碼，否則會造成App閃退</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transaction.commitAllowingStateLoss()</span><br></pre></td></tr></table></figure>
<p>但若是從Activity切換到Fragment時，可以直接使用<code>commti()</code>就可以了</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Fragement</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-FireBase 介紹</title>
    <url>/2017/01/04/Android-FireBase-%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>利用google 最新的firebase雲端資料庫技術讓App可以變得更加萬用</p>
<p>Firebase在2014年的時候被google正式收購，接著由google轉手開發後不斷地精進</p>
<p>而在Android Studio2.2版當中，google也首次加入的Firebase的功能</p>
<span id="more"></span>
<p>Firebase本身採用NoSql的概念，並且資料的產出顯示由json格式來進行顯示</p>
<p>簡單的說，使用了Firebase後，自己就不需要再額外寫後端程式與資料庫溝通來撈取資料，這部分Google已經幫你處理好了</p>
<p>而他本身SDK可以幫你處理離線問題（斷線，重連，保留訊息重新發送…） 使用起來簡單，但在設計noSql資料需要比較多功夫</p>
<p>畢竟資料上的key相較傳統的資料庫有所不同</p>
<p>當你想要新增一筆資料時，會是像這個樣子：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/c26ac24a-9b34-4dfe-aefd-53873f2d8acf/1483541322_69598.png"><br>藉由名稱來顯示層級，假設要輸入第五筆的資料，在名稱欄中則需寫上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5/name</span><br></pre></td></tr></table></figure>

<p>而我們今天要介紹的主要是針對於Android當中，如果想要使用Firebase那該如何去進行調用</p>
<p>前置Firebse資料庫的設計在這邊筆者就不多攢述了，畢竟官方的教學文寫得相當淺顯易懂</p>
<p>因此我們直接跳到Android Studio教你如何將在Firebase當中所設計的資料顯示在Android上</p>
<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝本文開始＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p>
<p>Firebase是一個第三方套件，因此在專案開始之前我們需要先進行import</p>
<p>因此首先請先在Grade當中載入以下套件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">compile <span class="string">&#x27;com.firebase:firebase-client-android:2.3.1+&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">        exclude <span class="string">&#x27;META-INF/LICENSE&#x27;</span></span><br><span class="line">        exclude <span class="string">&#x27;META-INF/LICENSE-FIREBASE.txt&#x27;</span></span><br><span class="line">        exclude <span class="string">&#x27;META-INF/NOTICE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當一切就緒後，我們到一開始的Xml檔案，也就是畫面設計</p>
<p>先拉一個listview出來</p>
<p>如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/activity_main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.example.leo.firebase2.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接著切換到java檔案</p>
<p>把剛剛的listview進行初始化後，開始針對Firebase進行資料的撈取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">listView = (ListView) findViewById(R.id.list);</span><br><span class="line">adapter = <span class="keyword">new</span> <span class="title class_">ArrayAdapter</span>&lt;String&gt;(<span class="built_in">this</span>,android.R.layout.simple_list_item_1);</span><br><span class="line">listView.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line">Firebase.setAndroidContext(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//將Firebase實體化後，把在Firebase官網上的資料庫網址貼上</span></span><br><span class="line"><span class="type">Firebase</span> <span class="variable">firebase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Firebase</span>(<span class="string">&quot;https://test-25861.firebaseio.com/contacts&quot;</span>);</span><br><span class="line"><span class="comment">//建立監聽事件，當資料庫當中的欄位被增加/刪除/移動等等就會進行觸發</span></span><br><span class="line"><span class="comment">//當資料庫有欄位異動，就會同步刷新listview</span></span><br><span class="line">firebase.addChildEventListener(<span class="keyword">new</span> <span class="title class_">ChildEventListener</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChildAdded</span><span class="params">(DataSnapshot dataSnapshot, String s)</span> &#123;</span><br><span class="line">        adapter.add((String) dataSnapshot.child(<span class="string">&quot;name&quot;</span>).getValue());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChildChanged</span><span class="params">(DataSnapshot dataSnapshot, String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChildRemoved</span><span class="params">(DataSnapshot dataSnapshot)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChildMoved</span><span class="params">(DataSnapshot dataSnapshot, String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCancelled</span><span class="params">(FirebaseError firebaseError)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>當程式完成後記得要在Manifest 加上連線權限，否則無法正常上網。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>完成之後就會發現listview上面就會有來自Firebase當中的資料了</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>FireBase</tag>
      </tags>
  </entry>
  <entry>
    <title>Android - 封裝Fragment當中換頁的程式碼</title>
    <url>/2017/02/15/Android-%E5%B0%81%E8%A3%9DFragment%E7%95%B6%E4%B8%AD%E6%8F%9B%E9%A0%81%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知道各位會不會有這種想法：不想將重複的程式碼一直加入到程式當中</p>
<p>在寫Android當中，我個人認為Fragment是一個很棒的東西，因為它可以將你的App挖出一塊空間出來，來讓你的Fragment Layout來進行切換</p>
<p>但是，在切換的過程當中，往往切換頁面的程式碼都需要進行重複的撰寫。</p>
<span id="more"></span>
<p>因此筆者一直在思考，要如何做到只寫一次，就可以持續的做切換</p>
<p>因此就想出了可以直接將切換頁面的程式碼進行封裝</p>
<p>利用靜態方法，讓底下的這串切換程式碼的功能能夠進行覆用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FragmentTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> getFragmentManager().beginTransaction();</span><br><span class="line">       transaction.replace(<span class="string">&quot;欲切換的頁面&quot;</span>);</span><br><span class="line">       transaction.commit();</span><br></pre></td></tr></table></figure>
<p>但當你寫完後，你會發現…. Error!!<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/52059204-bcd9-4f90-9abb-0e95893eff98/1487149123_5901.png"></p>
<p>他會告訴你，你的靜態方法Change當中，包含了非靜態的方法「getFragmentManager()」</p>
<p>那…該怎麼辦？難道就註定無法將程式碼進行重複使用嗎？</p>
<p>在跟高手討論過後，既然山不轉，就路轉</p>
<p>我們一樣宣告成靜態函數，但是這次呢，我們將參數全部由我們的MainActivity來進行傳送</p>
<p>因此在我們封裝的這個類別 FragmentManagerTool 當中</p>
<p>我們寫了這樣的程式碼</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FragmentManagerTool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* initial Fragment */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Bundle savedInstanceState, FragmentManager fragmentManager, <span class="type">int</span> layoutID, Fragment fragment)</span> &#123;</span><br><span class="line">        <span class="type">FragmentTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> fragmentManager.beginTransaction();</span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState == <span class="literal">null</span>) &#123;</span><br><span class="line">            transaction.add(layoutID, fragment).commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* replace Fragment */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">replaceFragment</span><span class="params">(FragmentManager fragmentManager, <span class="type">int</span> layout, Fragment f)</span> &#123;</span><br><span class="line">        <span class="type">FragmentTransaction</span> <span class="variable">ft</span> <span class="operator">=</span> fragmentManager.beginTransaction();</span><br><span class="line">        ft.replace(layout, f);</span><br><span class="line">        ft.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們將參數由外面的Activity來進行傳入，如此一來就可以透過static來將我們的切換頁面函數來進行呼叫。</p>
<p>這時候外面只需要這樣撰寫就可以了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FragmentManagerTool.init(savedInstanceState,getSupportFragmentManager(),R.id.content,ViewList.Instance());</span><br></pre></td></tr></table></figure>
<p>這樣的做法是不是很方便呢？</p>
<p>這時候也許你會問：</p>
<p>為什麼會需要有init 這個方法？</p>
<p>不是只需要將頁面進行replace就好了嗎？為什麼在 init() 當中，會用到Add()的方法呢？</p>
<p>原因在於說：</p>
<p>各位有沒有發現到在MainActivity當中的OnCreate()當中，有著這樣的一段Code:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState /*What this?*/) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //頁面切換</span><br><span class="line">        FragmentManagerTool.init(savedInstanceState,getSupportFragmentManager(),R.id.content,ViewList.Instance());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>各位會發現到，在你的OnCreate當中有一個Bundle類別的參數  savedInstanceState<br>這是什麼呢？我們查閱了官網的解釋，有興趣的可以點選<a href="https://developer.android.com/reference/android/app/Activity.html#onCreate%28android.os.Bundle%29">連結</a>進行查閱： </p>
<p>文件上說明了：「 savedInstanceState Always都會是null，直到在背景執行記憶體回收時，savedInstanceState 會保存你上一次的Activity」<br> 也就是說，在OnCreate當中的參數，主要是為了將你的App在背景執行時，倘若被回收掉記憶體，仍然能保持先前的樣子，包含Fragment</p>
<p>因此，在第一次使用Fragment Add的時候 才會需要這樣判斷，當savedInstanceState為null的時候 才進行Add<br>把Fragment加入到Activity中 其餘都採用Replace去做更換。</p>
<p>如此一來，不僅記憶體回收時可以保持先前的樣子，而我們所想要達到的目的封裝成類別使用也同時成功了。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
  </entry>
  <entry>
    <title>Angular Universal教學-將現有專案導入Server Side Render</title>
    <url>/2020/07/24/Angular-Universal%E6%95%99%E5%AD%B8-%E5%B0%87%E7%8F%BE%E6%9C%89%E5%B0%88%E6%A1%88%E5%B0%8E%E5%85%A5Server-Side-Render/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>找了各式各樣的文章，一直沒有看到完整關於Angular Univeral的詳細步驟教學</p>
<p>而在設定時也會有一些小細節需要處理，因此本文將完整從 Client Side Render 如何成功導入 Server Side Render</p>
<p>讓 Google的爬蟲能夠搜尋的到使用 Angular開發的網站。</p>
<p>在2020的今天，隨著Web Framework的竄起，使用前端框架 如:Angular，React，Vue開發系統早已是見怪不怪的事。</p>
<p>但這種前端主流框架，對於 SPA 沒辦法進行SEO一直以來都是開發者最為頭痛的事。</p>
<p>因此就有 Next.js 這類的工具可以協助我們進行Server-Side-Render。</p>
<span id="more"></span>
<p>而在Angular中，則有Angular Universal可以幫助我們解決問題。</p>
<p>早期 Angular 要使用 SSR 技術要新增不少的檔案與內容，但現在只需要使用cli的指令就可以達成。</p>
<blockquote>
<p>加入 @nguniversal&#x2F;express-engine 到專案中</p>
</blockquote>
<p>在Angular專案下，我們可以安裝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng add @nguniversal/express-engine --clientProject 專案名稱(可以由angular.json查看名稱)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/YUTHd6d.png"></p>
<p>安裝後，我們會發現cli指令幫我們建立了不少檔案。</p>
<p>其中最主要的部份則以server.ts 以及 app.server.module.ts這兩支檔案為主。</p>
<p>這邊簡單說明一下:</p>
<p>server.ts主要是運行我們SSR最主要的程式，透過這支程式，會自動在部屬時自動將首頁進行編譯，讓我們的angular的程式，能夠預先載入到index.html中</p>
<p>而不是透過瀏覽器執行的時候才將js渲染到畫面上。簡單來說，就是該程式就是將首頁的js進行編譯，並載入到html中回傳靜態的網頁內容。</p>
<p>app.server.module.ts 則是與app.module.ts相同，但不同的是，透過ssr編譯時，會採用的是app.server.module.ts進行呼叫。</p>
<p>在安裝好express-engine 套件後，接下來要運行 Universal Web Server。</p>
<p>這裡跟一般我們平時在使用 <code>ng serve </code>一樣，都是去呼叫 node.js的express起來，進行監聽。</p>
<p>輸入以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build:ssr;npm run serve:ssr</span><br></pre></td></tr></table></figure>
<p>就會執行 ssr 的build(部屬)以及serve(運行)。</p>
<p>如果正確無誤的話，那麼你將會看到以下畫面:<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/a9760cbf-efad-422e-99d7-a97f83e02a96/1595576984.png"></p>
<p>但如果不能build 出現 <font color="red"> can’t find window &#x2F; localstorage </font>的話。由於SSR是透過nodejs預先將頁面進行編譯以及載入。</p>
<p>因此在nodejs中並沒有 windows 或是 localStorage等其他在Web上的功能。</p>
<p>儘管可以透過 nodeJS進行部分模擬，放入到 server.ts中，讓node.js讀懂這些語法是什麼。</p>
<p><font color="red">但大多數在Client Side中的語法，還是得需要透過瀏覽器去運行。</font></p>
<p>讓node.js讀懂的語法如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;localStorage-polyfill&#x27;;</span><br><span class="line">global[&#x27;localStorage&#x27;] = localStorage;</span><br></pre></td></tr></table></figure>

<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/a9760cbf-efad-422e-99d7-a97f83e02a96/1595577448.png"></p>
<p>但如果是其他的套件，例如應該要在Client端運行的 Ex: jQuery&#x2F;scroll …等<br>就不應該由Server編譯的時候執行。</p>
<p>必須區分哪些程式碼應該要在Server進行SSR編譯時執行，哪些該由Client執行的時候運行。</p>
<p>因此我們需要在 Component的 constructor 中 注入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor(@Inject(PLATFORM_ID) private platformId: any) &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>並且在需要由Client端執行的程式碼加入以下判斷:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isPlatformBrowser(this.platformId)) &#123;</span><br><span class="line">    const anchorOffset = $(&#x27;div.anchor-&#x27; + this.anchor);</span><br><span class="line">    $(&#x27;html,body&#x27;).animate(&#123;</span><br><span class="line">      scrollTop: anchorOffset.offset().top - 100</span><br><span class="line">    &#125;, 100);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>像上面這種有使用到 jQuery還有scroll，牽涉到畫面甚至是動畫效果的，都應該由Client端執行，而非在 Server端中執行。</p>
<p>因此我們就需要透過 isPlatformBrowser(this.platformId) 來判斷當前執行此段程式碼是否為Browser</p>
<p>若是在SSR編譯時期，則該段程式就不會被運行。</p>
<p><font color="red">註記: 若使用 ngModel的話，使用到該物件的所有兜必須要先初始化 才能使用，讓nodejs編譯。 </font></p>
<p>若上述都完成，則會在dist建立browser以及server這兩個資料夾 。<br>browser:編譯完後所產生的程式碼，內含有index.html (和過去使用 ng build –prod相同)<br>server&#x3D;&gt;在SSR渲染的第一頁中，所有用到的圖檔，以及js都會在這裡</p>
<p>若正常完成的話，會自動在 localhost端 監聽 4000 port 來運行SSR<br>Node Express server listening on <a href="http://localhost:4000/">http://localhost:4000</a></p>
<p>此時將網頁按右鍵檢視原始碼，將會看到 在 <code>&lt;app-root&gt;&lt;/app-root&gt;</code> 中的程式碼已經被自動帶入。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/a9760cbf-efad-422e-99d7-a97f83e02a96/1595578196.png"></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/a9760cbf-efad-422e-99d7-a97f83e02a96/1595578221.png"></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Angular Universal</category>
      </categories>
      <tags>
        <tag>Angular Universal</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular Universal 教學-如何將Server Side Render 專案部屬到IIS上</title>
    <url>/2020/07/24/Angular-Universal%E6%95%99%E5%AD%B8-%E5%A6%82%E4%BD%95%E5%B0%87Server-Side-Render-%E5%B0%88%E6%A1%88%E9%83%A8%E5%B1%AC%E5%88%B0IIS%E4%B8%8A/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>翻遍了各大國外網站，StakeOverFlow也每一篇仔細看過。</p>
<p>發現對於如何一步步將 Angular Universal完整部屬到IIS上的步驟，不是內容過時，就是步驟漏了不少。</p>
<p>因此撰寫一篇完整的將SSR專案部屬到IIS上的步驟。</p>
<p>相信我，這一篇絕對會是最完整的部屬流程文章，如果不是，倒想看看你的完整流程。</p>
<span id="more"></span>

<p>在上一篇的教學中，我們成功的將Client-Side-Render的專案，導入了SSR</p>
<p>並且透過cli幫我們生成了兩個資料夾 server&#x2F;browser。</p>
<p>接下來要介紹，拿到這兩個資料夾後，我們要如何將專案部屬到IIS上，讓其順利執行。</p>
<p><del>畢竟在本地端上可以執行與在Server上運行是完全不同的事。</del></p>
<blockquote>
<p>Step1: 將我們dist的資料夾直接複製，貼到你要運行IIS站台的資料夾中。<br>Step2: 將dist&#x2F;專案名稱&#x2F;server 內的main.js 放入IIS站台根目錄資料夾內。<br>Step3.將IIS WebConfig放入IIS站台根目錄資料夾內</p>
</blockquote>
<p>此時，我們的資料夾的目錄中，應該會長這個樣子:<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/6ae26f72-8ae1-4525-b53d-edcb83ac5d98/1595579095.png"></p>
<blockquote>
<p>Step4. 安裝<a href="https://www.iis.net/downloads/microsoft/url-rewrite">Url Rewrite2.1</a> ， <a href="https://github.com/tjanczuk/iisnode/wiki/iisnode-releases">iisnode</a>，iisexpress</p>
</blockquote>
<p>由於當User連線到我們的Server時，我們必須要先將首頁的內容給編譯完成，因此存取的檔案會是剛剛放在外層的main.js</p>
<p>所以，我們需要透過 UrlRewrite，幫我們做重導向，強制執行main.js。</p>
<p>而要能夠執行main.js，我們需要透過iisnode以及iisexpress來運行。</p>
<p>要確認是否有安裝iisnode模組，我們可以到:<br>站台 → 網站 → 模組 → 確認是否已安裝iisnode模組</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/6ae26f72-8ae1-4525-b53d-edcb83ac5d98/1595579367.png"></p>
<blockquote>
<p>Step5. 若沒有在模組中看到iisnode，我們可以到 C:\Program Files\iisnode 執行 setupsamples.bat</p>
</blockquote>
<blockquote>
<p>Step6.安裝 Node.js</p>
</blockquote>
<p>如同上述所說，我們需要透過node.js來幫我們編譯，因此在Server上我們仍需要安裝node.js，並透過它安裝一些指令與編譯。</p>
<blockquote>
<p>Step7 透過cmd.exe 進入專案後 利用 npm 安裝 express module</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Step8.到剛剛我們下載的webconfig 設定node.js讀取路徑(放在webServer標籤底下)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iisnode nodeProcessCommandLine=&quot;C:\Program Files\nodejs\node.exe&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/6ae26f72-8ae1-4525-b53d-edcb83ac5d98/1595581926.png"></p>
<blockquote>
<p>9.設定IISUser存取整個資料夾的權限</p>
</blockquote>
<p>由於我們連線進來後，IIS會根據我們上面webconfig中的urlRewrite，將所有的連線都Redirect到main.js，並驅動node.js來執行我們的專案。</p>
<p>因此我們需要讓IIS能存取整個資料夾的權限。如果沒有設定，就會噴出以下錯誤：</p>
<blockquote>
<p>The node.exe process has not written any information to stderr or iisnode was unable to capture this information. Frequent reason is that the iisnode module is unable to create a log file to capture stdout and stderr output from node.exe. Please check that the identity of the IIS application pool running the node.js application has read and write access permissions to the directory on the server where the node.js application is located.</p>
</blockquote>
<blockquote>
<p>Step10.將專案的package.json複製過去到IIS站台根目錄</p>
</blockquote>
<p>這點筆者也很是疑惑。由於在過去的Angular專案，當我們執行 ng build –prod 時，會幫我們產生已打包好的專案，並放到dist中。</p>
<p>此時理當所有有使用到的Module都會一併放到dist中，因此dist應該就夠用了，但不知為何在導入SSR之後，還是需要整包的nodeModules，否則仍然會報錯，回應找不到該Module。這點若有其他讀者有發現其他解法的話，再請留言告知。</p>
<p>因此目前的解法是將專案的package.json複製過去，並安裝其使用到的套件。</p>
<blockquote>
<p>Step11.執行 npm insall</p>
</blockquote>
<p>將所有package.json的套件都安裝到站台中。</p>
<blockquote>
<p>Step12.設定不想要Rewrite的Url</p>
</blockquote>
<p>若網站底下還有其他子站台 (API或是其他的)，則需要進行在webconfig中撰寫 urlRewrite的role。</p>
<p>由於webconfig會將所有輸入的url，全部轉址到main.js，所以要在上方增加不允許轉址的url role。<br>如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;rule name=&quot;apiContent&quot; patternSyntax=&quot;Wildcard&quot; stopProcessing=&quot;true&quot;&gt;  </span><br><span class="line">     &lt;match url=&quot;api/*&quot; /&gt;</span><br><span class="line">     &lt;action type=&quot;None&quot; /&gt;</span><br><span class="line">&lt;/rule&gt; </span><br></pre></td></tr></table></figure>
<blockquote>
<p>Step13.收工! PS 記得開防火牆</p>
</blockquote>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Angular Universal</category>
      </categories>
      <tags>
        <tag>Angular Universal</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular - 簡單介紹Angular中的HttpClient(HttpClient V.S Http)</title>
    <url>/2018/03/05/Angular-%E7%B0%A1%E5%96%AE%E4%BB%8B%E7%B4%B9Angular%E4%B8%AD%E7%9A%84HttpClient-HttpClient-V-S-Http/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自從Angular 4.3版以後，新的網路傳輸HttpClient在Angular中被引入。</p>
<p>而官方在Angular第五版開始，將舊的 HttpModule被標示為不建議使用，因此在此為各位介紹為什麼官方要採用HttpClient，而捨棄舊的Http</p>
<span id="more"></span>

<h2 id="新功能"><a href="#新功能" class="headerlink" title="新功能"></a>新功能</h2><p>我們來看看第五版<code>HttpClient</code>的新功能。</p>
<h3 id="自動轉換為從JSON到一個對象"><a href="#自動轉換為從JSON到一個對象" class="headerlink" title="自動轉換為從JSON到一個對象"></a>自動轉換為從JSON到一個對象</h3><p>當我們從網路接收數據時，我們在Api當中會使用JSON格式來進行回傳。 為了能夠在我們的程式當中處理這些JSON數據，我們需要根據我們得到的JSON數據創建一個對象。</p>
<p>讓我們看一個使用舊Angular http基本範例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getData</span>(<span class="params"></span>) &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;yourAPI&#x27;</span>) </span><br><span class="line">      .<span class="title function_">map</span>(<span class="function"><span class="params">x</span>=&gt;</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(x.<span class="property">data</span>)) 將每一個資料轉換成json格式</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x);) 輸出json格式資料</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述的Code主要做了三件事情，我們把它們整理條列一下：</p>
<p>獲取JSONData（這是Response類型）。<br>使用JSON.parse()將Data轉換為Json格式進行解析<br>將結果記錄到主控台中。<br>而使用新的HttpClient 我們的Code只需要這樣：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getData</span>(<span class="params"></span>) &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;yourAPI&#x27;</span>) </span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x);) 輸出json格式資料</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外我們也可以使用泛型透過衍生型類別來訂定資料：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getData</span>(<span class="params"></span>) &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="title class_">User</span>&gt;(<span class="string">&#x27;yourAPI&#x27;</span>) </span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="attr">x</span>:<span class="function"><span class="params">User</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x);) 輸出json格式資料，有了泛型我們就可以使用提示字元來取得欄位資料</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Header的簡化語法"><a href="#Header的簡化語法" class="headerlink" title="Header的簡化語法"></a>Header的簡化語法</h3><p>通常在做網路傳輸的時候，為了在請求中設置自定義Header（如Auth），我們需要實體化HttpHeaders()對象並將(‘header’, ‘value’)傳遞給函數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>在這個例子中，我們將Content-TypeHeader設置為text （ application&#x2F;json是默認值）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;Authorization&#x27;</span>, <span class="string">&#x27;CustomToken&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="如何從Http更改為新的HttpClient："><a href="#如何從Http更改為新的HttpClient：" class="headerlink" title="如何從Http更改為新的HttpClient："></a>如何從Http更改為新的HttpClient：</h3><p>第一步是確保安裝了適當的Angular版本，即4.3和更高版本。<br>在項目的<code>Module</code>中用<code>HttpClientModule</code>替換<code>HttpModule</code> 。 新的<code>HttpClientModule</code>應該從<code>@angular/common/http</code>導入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Old import &#123; HttpModule &#125; from &#x27;@angular/http&#x27;; </span></span><br><span class="line"></span><br><span class="line">   @<span class="title class_">NgModule</span>(&#123; ... <span class="attr">imports</span>: [ <span class="title class_">HttpModule</span>, ], ... &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// New import &#123; HttpClientModule &#125; from &#x27;@angular/common/http&#x27;; </span></span><br><span class="line">   @<span class="title class_">NgModule</span>(&#123; ... <span class="attr">imports</span>: [ <span class="title class_">HttpClientModule</span>, ], ... &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Old Http</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Http</span>, <span class="title class_">Headers</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>; </span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>() <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ExampleService</span> &#123; </span><br><span class="line"></span><br><span class="line">  private _headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(&#123;<span class="string">&#x27;Authentication&#x27;</span>: <span class="string">&#x27;Token&#x27;</span>&#125;); </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private http: Http</span>) &#123;&#125;</span><br><span class="line">  public <span class="title function_">getData</span>(<span class="params"></span>) &#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;youtAPI&#x27;</span>, <span class="variable language_">this</span>.<span class="property">_headers</span>)</span><br><span class="line">                  .<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(x.<span class="property">body</span>); &#125;)</span><br><span class="line">                  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// New HttpClient</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClient</span>, <span class="title class_">HttpHeaders</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>; </span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>() <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ExampleService</span> &#123; </span><br><span class="line"> </span><br><span class="line">private _headers = &#123;<span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">set</span>(<span class="string">&#x27;Authentication&#x27;</span>, <span class="string">&#x27;Token&#x27;</span>)&#125;; </span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">private http: HttpClient</span>) &#123; &#125; </span><br><span class="line"></span><br><span class="line">public <span class="title function_">getData</span>(<span class="params"></span>) &#123; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;youtAPI&#x27;</span>, <span class="variable language_">this</span>.<span class="property">_headers</span>).<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x); </span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>基本上，語法沒有很大的變化。 HttpClient保留了舊的http： http.get() ， http.post()等相同的方法名稱。</p>
<p>因此大家可以愉快地升級，享受簡潔的語法吧！</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>HttpClient</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular - 解決ViewChild undefined 問題</title>
    <url>/2020/07/27/Angular-%E8%A7%A3%E6%B1%BAViewChild-undefined-%E5%95%8F%E9%A1%8C/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我們在Angular中想要操作Template的DOM時，我們通常會在該DOM上加入範本參考變數(Template reference variables)</p>
<p>再經由ViewChild去取得，但並不是所有情況都可以取得到畫面上的DOM，因此本文主要介紹為什麼會遇到undefined問題</p>
<p>以及如何解決。</p>
<span id="more"></span>

<p>前陣子剛好接觸一個Angular專案，該專案需要在彈跳視窗中能在input輸入框中輸入內容，並根據關鍵字進行篩選。</p>
<p>這功能其實非常常見，筆者自己慣用的方法主要是透過Observable來訂閱該輸入框，並能即時取得使用者所輸入的內容。</p>
<p>所以一般程式碼大概會長得像這個樣子：</p>
<p>Template:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; [(ngModel)]=&quot;inputSearch&quot; #inputKey=&quot;ngModel&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>Component:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export class InputSearchComponent implements  AfterViewInit &#123;</span><br><span class="line"></span><br><span class="line">  @ViewChild(&#x27;inputKey&#x27;) key: NgModel;</span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line">  </span><br><span class="line">  inputSearch;</span><br><span class="line"></span><br><span class="line">  ngAfterViewInit(): void &#123;</span><br><span class="line">   </span><br><span class="line">    this.key.valueChanges.pipe(debounceTime(1000)).subscribe(x =&gt; console.log(x));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>但正當我在該專案寫上這樣的Code時，卻回報該錯誤訊息：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/57a62977-e084-435c-b1e8-e56954557ca4/1557296775_56349.png"></p>
<p>看到錯誤訊息的當下還一度以為自己是不是哪裡打錯了，以往都不會發生的錯誤竟然在這裡發生。</p>
<p>後來進一步追查程式碼後，發現其實是因為 ngIf在搞鬼。</p>
<p>因為我的專案需求是當彈跳視窗出現時，使用者可以根據輸入框填寫關鍵字，進而查詢所需要的資訊。</p>
<p>在這裡我使用了ngIf，當按鈕按下後，該彈跳視窗就可以顯示在畫面上，相反的如果條件不成立，則不顯示。</p>
<p>而其中ViewChild在Component當中，只會執行一次，也就是當畫面載入完成時，會透過範本參考變數來抓取我們的DOM。</p>
<p>問題就出在這個地方，因為ngIf並不是直接將該區塊隱藏起來(display:none)，而是直接將該區塊加入&#x2F;銷毀。</p>
<p>因此在一開始ngIf條件為false時，該區塊並不會顯示在整個DOM樹上。</p>
<p>所以ViewChild取不到物件，自然就會回傳undefined。而當undefined後，又去呼叫valueChanges當然就沒有這個方法啦！，所以才會回報錯誤訊息。</p>
<p>那，現在我們知道問題發生的點了，我們可以怎麼做？</p>
<p>筆者這裡提供兩個解法供讀者們使用</p>
<blockquote>
<p>改用hidden<br>在Angular中，有提供屬性<code>[hidden]</code>在這邊我們一樣可以透過條件式決定是否顯示，此外由於是隱藏(display:none)的關係，因此在DOM上還是存在的，</p>
</blockquote>
<p>所以ViewChild就可以透過範本參考變數取得我們所需的DOM元件。</p>
<blockquote>
<p>透過ChangeDetectorRef 再次偵測畫面上的DOM樹</p>
</blockquote>
<p>由於剛剛我們有提到ViewChild只會在第一次的時候抓取DOM樹，因此即使後面ngIf條件為True可以顯示內容時，仍然不會去抓取，因此我們可以透過ChangeDetectorRef類別</p>
<p>當我們注入<code>ChangeDetectorRef</code>類別後，我們可以透過<code>detectChanges()</code>方法，偵測DOM樹有無變更，若變更的話，ViewChild就會在進行一次抓取</p>
<p>透過這樣的方式我們就可以取得畫面上的元件了，無論該DOM是否有在畫面上。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular 實作檔案下載(瀏覽器自動下載)</title>
    <url>/2020/07/27/Angular-%E5%AF%A6%E4%BD%9C%E6%AA%94%E6%A1%88%E4%B8%8B%E8%BC%89-%E7%80%8F%E8%A6%BD%E5%99%A8%E8%87%AA%E5%8B%95%E4%B8%8B%E8%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正常情況下，我們使用Angular發送Request取得API資料時，常見的情境都是取得json的格式。</p>
<p>因此HttpClient，預設會將response的內容自動轉換為json格式。</p>
<p>那，要如何實作檔案下載呢?</p>
<span id="more"></span>
<p>需利用Angular的HttpClient透過瀏覽器下載檔案，首先我們需要先指定回傳的型別(responseType)為blob(二進位格式)<br><font color="red"><br>註: 此步驟一定要做，因為HttpClient預設會將回傳格式設定為json格式，因此我們需要指定為blob格式才能下載。<br></font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let opton =  &#123; responseType: &#x27;blob&#x27; as &#x27;json&#x27; &#125;</span><br></pre></td></tr></table></figure>
<p>接著將response的內容轉換為blob格式，並透過 <a> 的href屬性，來自動下載。</a></p>
<p>完整程式碼如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// http.post 有以下三個參數需要給予(apiPath,body,option):</span><br><span class="line">// apiPath 為後端API路徑</span><br><span class="line">// body 為透過POST方式傳遞給後端API的參數(object)</span><br><span class="line">// option為發送request時所需要的額外設定(例如該範例為，將response的型態設定為blob格式。)</span><br><span class="line"></span><br><span class="line">this.http.post&lt;any&gt;(&#x27;your API path&#x27;, body, &#123; responseType: &#x27;blob&#x27; as &#x27;json&#x27; &#125;).subscribe(x =&gt; &#123;</span><br><span class="line">      </span><br><span class="line">this.blob = new Blob([x], &#123; type: &#x27;application/docx&#x27; &#125;); // application後面接下載的副檔名</span><br><span class="line"></span><br><span class="line">      let downloadURL = window.URL.createObjectURL(this.blob);</span><br><span class="line">      let link = document.createElement(&#x27;a&#x27;);</span><br><span class="line">      link.href = downloadURL;</span><br><span class="line">      link.download = &quot;template.docx&quot;; //瀏覽器下載時的檔案名稱</span><br><span class="line">      link.click();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>C# Dapper-SQL中的Entity Framework</title>
    <url>/2023/01/24/C-Dapper-SQL%E4%B8%AD%E7%9A%84Entity-Framework/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>關於Dapper的介紹，其實多到可以算月經文了XD</p>
<p>不過剛好有機會使用到，所以就順著介紹一下。</p>
<span id="more"></span>

<p>Dapper是一個輕量型的ORM工具，著重在效能與速度，所以他也只有一個Dll檔而已</p>
<p>非常輕量。</p>
<p>有興趣的讀者們可以到<a href="https://github.com/StackExchange/Dapper">GitHub</a>上看一下SouceCode，都是公開的。</p>
<p>雖然耳聞Dapper這個神器很久了，只是由於筆者是EF派的，所以已經很少會接觸到純下SQL的部分。</p>
<p>不過最近，筆者剛好需要撰寫SQL Command，於是又重新投入 DataReader、DataSet、DataTable的懷抱。</p>
<p>只是在使用的過程中，由於不想要讓程式碼看起來太過骯髒，於是在上層多包了一層父類來減少重複的程式碼</p>
<p>不過在撰寫查詢的時候卻發現到一個問題：</p>
<p>以下由DataReader做一個簡單的示範。<br>片段程式碼：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定相關資料庫連線參數</span></span><br><span class="line">String connection = System.Configuration.ConfigurationManager.ConnectionStrings[<span class="string">&quot;OrderDB&quot;</span>].ConnectionString;</span><br><span class="line"><span class="keyword">protected</span> SqlConnection sc = <span class="keyword">new</span> SqlConnection(connection);</span><br><span class="line"><span class="keyword">protected</span> SqlCommand sqlcommand = <span class="keyword">new</span> SqlCommand();</span><br><span class="line">String sql = <span class="string">&quot;select Student_Id,Student_Name from Student&quot;</span>;</span><br><span class="line"></span><br><span class="line">sqlcommand.Connection = sc;</span><br><span class="line"><span class="comment">// 開啟連線</span></span><br><span class="line">sc.Open();</span><br><span class="line">SqlCommand command = <span class="keyword">new</span> SqlCommand(sql,connection);</span><br><span class="line"><span class="comment">// 讀取資料</span></span><br><span class="line">SqlDataReader reader = command.ExecuteReader();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (reader.Read())</span><br><span class="line"> &#123;</span><br><span class="line">   Console.WriteLine(<span class="string">&quot;StudentId: &#123;0&#125;, StudentName: &#123;1&#125;&quot;</span>, reader[<span class="string">&quot;Student_Id&quot;</span>],reader[<span class="string">&quot;Student_Name&quot;</span>]);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>由於已經習慣寫EF的我，對於這樣的操作方式會覺得顯得不夠直觀。</p>
<p>明明已經在Select當中定義了要讀取哪些欄位，但是在最後DataReader的時候，還是需要再次手動撈取欄位</p>
<div style="color:red">
假設如果要塞到自定義的List中，還需要一個一個把欄位給放進去。
</div>
於是開始思考，該怎麼做才能最快解決這個問題。

<p>後來研究了許久，還是決定投入EF的懷抱，即使是透過SQL Command的方式。</p>
<p>Dapper的使用方式相當簡單：</p>
<p>首先在NuGet當中先安裝Dapper工具</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/5b0420fd-8581-417e-a5b7-ae1be16e13fc/1512487109_34179.png" alt="Dapper"></p>
<p>接著就可以直接撰寫啦！</p>
<p>Dapper主要是透過 Extension Method 來擴充 SqlConnection的類別</p>
<p>因此當你在最上層 using了 Dapper後</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapper;</span><br></pre></td></tr></table></figure>
<p>你會發現SqlConnection多了以下東西：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/5b0420fd-8581-417e-a5b7-ae1be16e13fc/1512487331_02624.png"></p>
<p>主要是針對Query來去做擴充。</p>
<p>後來了解後發現原理其實很簡單</p>
<p>就是先取得泛型的類別，並透過for迴圈的方式，將每一個的欄位資料，Mapping到指定的類別當中，</p>
<p>最後再裝回List，結束。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> obj;</span><br><span class="line">Type type = obj.GetType();</span><br><span class="line"><span class="keyword">var</span> ps = type.GetProperties();</span><br></pre></td></tr></table></figure>
<p>而Dapper使用方法呢其實就是這樣子：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定相關資料庫連線參數</span></span><br><span class="line">String connection = System.Configuration.ConfigurationManager.ConnectionStrings[<span class="string">&quot;OrderDB&quot;</span>].ConnectionString;</span><br><span class="line"><span class="keyword">protected</span> SqlConnection sc = <span class="keyword">new</span> SqlConnection(connection);</span><br><span class="line"><span class="keyword">protected</span> SqlCommand sqlcommand = <span class="keyword">new</span> SqlCommand();</span><br><span class="line">String sql = <span class="string">&quot;select Student_Id,Student_Name from Student&quot;</span>;</span><br><span class="line"></span><br><span class="line">sqlcommand.Connection = sc;</span><br><span class="line"><span class="comment">// 開啟連線</span></span><br><span class="line">sc.Open();</span><br><span class="line"><span class="comment">// 資料讀取</span></span><br><span class="line">String sql = <span class="string">&quot;select Student_Id,Student_Name from Student&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result =  sc.Query&lt;Student&gt;(sql);</span><br></pre></td></tr></table></figure>
<p>這裡使用泛型版本的 Query 方法，以便將查詢結果自動對應至先前定義好的 Student 物件的屬性。</p>
<p>如此一來就可以快速的取得資料了。</p>
<p>結果如下：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/5b0420fd-8581-417e-a5b7-ae1be16e13fc/1512488053_3285.png"></p>
<p>另外，Dapper本身也支援具名參數，主要是為了防止 sql injection</p>
<p>使用方法也相當的簡單：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;select Student_Id,Student_Name from Student where Student_Name=@Name&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result =  sc.Query&lt;Student&gt;(sql,<span class="keyword">new</span> &#123; Name=<span class="string">&quot;Leo&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/5b0420fd-8581-417e-a5b7-ae1be16e13fc/1512488567_67889.png"></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>Dapper</tag>
      </tags>
  </entry>
  <entry>
    <title>C# - LINQ to Entities 查詢中無法建構實體或複雜類型</title>
    <url>/2023/01/24/C-LINQ-to-Entities-%E6%9F%A5%E8%A9%A2%E4%B8%AD%E7%84%A1%E6%B3%95%E5%BB%BA%E6%A7%8B%E5%AF%A6%E9%AB%94%E6%88%96%E8%A4%87%E9%9B%9C%E9%A1%9E%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在ORM盛行的時代，很多人都學會了使用LINQ來進行資料庫的撈取與操作</p>
<p>但是LINQ在操作時，有些地方需要額外注意的。否則就會產上如標題上所說的：</p>
<div style="color:red">
LINQ to Entities 查詢中無法建構實體或複雜類型
</div>

<p>因此今天來跟大家談談，關於這問題，以及該如何解決。</p>
<span id="more"></span>

<p>一般來說，我們在撰寫LINQ撈取資料庫的時候，我們會這樣寫：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = db.Store.<span class="keyword">select</span>(x=&gt; &#123;</span><br><span class="line">   x.StoreId,</span><br><span class="line">   x.StoreName</span><br><span class="line">&#125;).ToList();</span><br></pre></td></tr></table></figure>
<p>但是筆者在撰寫Window Form的時候，由於想要將資料庫撈取出來的值，自動Binding到Combox上</p>
<p>並且可以針對這個資料集合做後續的操作，好讓我的Combox資料可以即時變動。</p>
<p>因此腦筋一轉，想著在Select的時候，為什麼總是建立一個匿名類別來儲存，而不是一開始就指定為一個強型別來做操作。</p>
<p>於是我在select後面，加上了由Entity映射所產生的類別：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;Store&gt; list = <span class="keyword">new</span> List&lt;Store&gt;();</span><br><span class="line"></span><br><span class="line">list = db.Store.<span class="keyword">select</span>(x=&gt; <span class="keyword">new</span> Store&#123;</span><br><span class="line"></span><br><span class="line">   Store.Id = x.StoreId,</span><br><span class="line">   Store.Name = x.Store.Name</span><br><span class="line">&#125;).ToList();</span><br></pre></td></tr></table></figure>
<p>結果這麼一寫，發現程式居然報錯了，原因為：</p>
<div style="color:red"> LINQ to Entities 查詢中無法建構實體或複雜類型
</div>

<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/de0c2f99-0e51-4977-91db-9ad994206191/1500539000_96484.png"></p>
<p>此時筆者開始好奇，是什麼樣的原因會導致這樣的錯誤發生？</p>
<p>後來在某一篇的<a href="https://stackoverflow.com/questions/5325797/the-entity-cannot-be-constructed-in-a-linq-to-entities-query">stackoverflow</a> 當中，找到了解答：</p>
<div class="note success">
    <p>
    Well, mapped entities in EF basically represent database tables. If you project onto a mapped entity, what you basically do is partially load an entity, which is not a valid state. EF won't have any clue how to e.g. handle an update of such an entity in the future (the default behaviour would be probably overwriting the non-loaded fields with nulls or whatever you'll have in your object). This would be a dangerous operation, since you would risk losing some of your data in the DB, therefore it is not allowed to partially load entities (or project onto mapped entities) in EF
    </p>
</div>

<p>主要原因是說，由Entity映射產生出來的類別，是用來表示定義資料庫的欄位，並不是一個有效的實體</p>
<p>也就是說，裡面的定義是為了資料庫而生，因此裡面有著許多定義資料庫的欄位、屬性 等等</p>
<p>而這些東西，並沒辦法轉換為SQL去執行，因此如果後面採用映射出來的類別，可能會造成資料庫的數據遺失等問題存在。</p>
<p>那…既然如此，我們應該如何解決這個問題？</p>
<p>這邊筆者提出兩種方式來解決：</p>
<ul>
<li>利用匿名類別將資料從資料庫讀取並轉換為LIST，接著再下一次Select，將LIST當中的內容讀出並且轉換為強型別</li>
<li>利用ViewModel將內容讀取出來</li>
</ul>
<p>首先第一種方式筆者個人比較不推薦，因為寫法來說相較並不直觀：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;Store&gt; list = <span class="keyword">new</span> List&lt;Store&gt;();</span><br><span class="line"></span><br><span class="line">list = db.Store.<span class="keyword">select</span>(x=&gt; <span class="keyword">new</span> &#123;</span><br><span class="line"></span><br><span class="line">   x.StoreId,</span><br><span class="line">   x.StoreName</span><br><span class="line">&#125;).ToList().<span class="keyword">select</span>(x =&gt; <span class="keyword">new</span> Store &#123;</span><br><span class="line"></span><br><span class="line">   StoreId = x.StoreId,</span><br><span class="line">   StoreName = x.StoreName,</span><br><span class="line">&#125;).ToList();</span><br></pre></td></tr></table></figure>

<p>利用以上的方式，等於我們相同的程式碼要再寫一次。雖然邏輯上來說完全不一樣，但是對開發者來說，卻要select兩次，相當不直觀。</p>
<p>因此筆者這邊推薦採用ViewModel的方式來去接值。</p>
<p>我們先建立一個ViewModel，裡面的欄位就是你想從資料庫當中撈取的欄位。</p>
<p>接著我們只需要這樣做就可以了：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;StoreViewModel&gt; list = <span class="keyword">new</span> List&lt;StoreViewModel&gt;();</span><br><span class="line"></span><br><span class="line">list = db.Store.<span class="keyword">select</span>(x=&gt; <span class="keyword">new</span> StoreViewModel&#123;</span><br><span class="line"></span><br><span class="line">   StoreId = x.StoreId,</span><br><span class="line">   StoreName = x.StoreName,</span><br><span class="line">&#125;).ToList();</span><br></pre></td></tr></table></figure>
<p>透過這樣的方式，我們將資料庫撈出來的內容 Binding到我們的ViewModel上，就可以解決這樣的問題了。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>LINQ</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 如何取得Enum的Name？-列舉(Enum)與switch應用</title>
    <url>/2018/02/02/C-%E5%A6%82%E4%BD%95%E5%8F%96%E5%BE%97Enum%E7%9A%84Name%EF%BC%9F-%E5%88%97%E8%88%89-Enum-%E8%88%87switch%E6%87%89%E7%94%A8/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我們很常會使用 enum （列舉）來將我們的狀態做一個紀錄</p>
<p>使用enum的優點在於我們不需要額外的打字，也不用擔心自己打錯字</p>
<p>因此就可以利用enum來去針對狀態去做一個紀錄、判斷。</p>
<p>而今天要介紹的是關於enum以及switch..case 搭配的方法。</p>
<span id="more"></span>
<p>在我們撰寫程式的時候，有時候針對多個Button功能會綁定同一個事件，再根據Button內容的不同來去執行功能。</p>
<p>這時候我們可能會搭配Enum這樣寫：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 讀取按鈕上的文字來執行功能：</span></span><br><span class="line"><span class="comment">// 如果不是讀取到功能按鈕，則將按鈕上的文字呈現在 文字方塊(Content)上</span></span><br><span class="line">Button btn = (Button)sender;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (btn.Text)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> 功能.換行.toString():</span><br><span class="line">                    Content.Text += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 功能.全部複製.toString():</span><br><span class="line">                    Content.SelectAll();</span><br><span class="line">                    Content.Copy();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 功能.貼上.toString():</span><br><span class="line">                    Content.Paste();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 功能.清空.toString():</span><br><span class="line">                    Content.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    Content.Text += btn.Text;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>但是這時候我們會發現編譯器錯誤：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/a19e7345-ece9-452b-9fed-a20cd133e9ad/1517549981_67453.png"></p>
<p>錯誤訊息告訴我們必須是「常數值」，原因在於我們 Switch內的值以及 Case中的內容並不一致，儘管已經使用.toString()</p>
<p>這時候我們可以使用 C# 6.0的功能- <code>nameof</code></p>
<blockquote>
<p>nameof 關鍵字可用來取得某變數的名稱。</p>
</blockquote>
<p>因此這時候我們只需要把程式碼改為如下就可以囉！</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Button btn = (Button)sender;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">switch</span> (btn.Text)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="function"><span class="keyword">case</span> <span class="title">nameof</span>(<span class="params">功能.換行</span>): <span class="comment">//取得enum 選項中的名字-換行</span></span></span><br><span class="line"><span class="function">                   Content.Text +</span>= <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="function"><span class="keyword">case</span> <span class="title">nameof</span>(<span class="params">功能.全部複製</span>):</span></span><br><span class="line"><span class="function">                   Content.<span class="title">SelectAll</span>()</span>;</span><br><span class="line">                   Content.Copy();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="function"><span class="keyword">case</span> <span class="title">nameof</span>(<span class="params">功能.貼上</span>):</span></span><br><span class="line"><span class="function">                   Content.<span class="title">Paste</span>()</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="function"><span class="keyword">case</span> <span class="title">nameof</span>(<span class="params">功能.清空</span>):</span></span><br><span class="line"><span class="function">                   Content.Text</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="literal">default</span>:</span><br><span class="line">                   Content.Text += btn.Text;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>


<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>Enum</tag>
      </tags>
  </entry>
  <entry>
    <title>C# Visual Studio 2017 快速產生類別圖</title>
    <url>/2020/07/27/C-Visual-Studio-2017-%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9F%E9%A1%9E%E5%88%A5%E5%9C%96/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信各位開發者剛接手到一個新專案時，有時候因為檔案太多而無法快速了解類別之間的關係。</p>
<p>而在Visual Studio 2017當中，微軟官方貼心的新增一個功能-類別設計工具</p>
<p>若要開啟「類別設計工具」這個功能，我們需要額外安裝。</p>
<span id="more"></span>

<p>在工具-&gt;取得工具與功能，我們把 <strong>Visual Studio 2017 Installer</strong> 叫出來。</p>
<p>接著我們可以在下圖中的「個別元件」，將類別設計工具進行勾選。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/064af7be-12aa-41c2-a965-fd5f7c580b0e/1551076801_40846.png"></p>
<p>接下來回到我們的專案中，如果我們想要繪製類別圖時，可以在專案中點選<strong>右鍵-&gt;一般-&gt;類別圖</strong></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/064af7be-12aa-41c2-a965-fd5f7c580b0e/1551076906_02002.png"></p>
<p>那如果我們是想要將現有的類別轉換成類別圖呢？</p>
<p>我們需要先打開「類別檢視」功能。</p>
<p><strong>檢視-&gt;類別檢視</strong></p>
<p>我們就可以開啟此介面。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/064af7be-12aa-41c2-a965-fd5f7c580b0e/1551077064_93622.png"></p>
<p>接著在專案中，按右鍵點選 檢視-&gt;類別圖檢視</p>
<p>VS就會自動幫你把專案中類別之間的關係給描繪出來囉！</p>
<p>以下兩張圖是筆者最近在開發專案中的其中兩個 namespace</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/064af7be-12aa-41c2-a965-fd5f7c580b0e/1551077165_90792.png"></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Controller的函數無法傳入多個參數</title>
    <url>/2023/01/24/Controller%E7%9A%84%E5%87%BD%E6%95%B8%E7%84%A1%E6%B3%95%E5%82%B3%E5%85%A5%E5%A4%9A%E5%80%8B%E5%8F%83%E6%95%B8/</url>
    <content><![CDATA[<span id="more"></span>

<p>前陣子同事在寫 WebAPI的時候，發現 Controller內的函數無法傳入超過一個以上的參數</p>
<p>只要傳超過一個以上，就會在Runtime當下直接噴錯，錯誤訊息為：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">has more than one parameter that was specified <span class="keyword">or</span> inferred <span class="keyword">as</span> bound <span class="keyword">from</span> request body. Only one parameter per action may be bound <span class="keyword">from</span> body. </span><br></pre></td></tr></table></figure>

<p>主要的意思是request body 傳入超過一個以上的參數，但在action中只應該有一個參數。</p>
<p>面對這樣的問題，一開始聽同事描述還覺得挺不可思議的，畢竟寫API那麼久了，從來沒聽過在Controller底下寫Method 參數最多只能給予一個。</p>
<p>後來請他額外測試，若是傳入基本資料型別(int,float等等) 是可以傳入多個的。</p>
<p>也就是說，只有傳入衍生資料型別(複雜類型)，是不能過的。</p>
<p>但縱使是這樣，這類的錯誤訊息我依然沒遇到過。</p>
<p>上網研究了一下才發現，由於 <font style="color:red"> Controller 內寫的Method 會默認為Action</font></p>
<p>也就是說不需要特別指定他是 [HttpGet] 或是 [HttpPost] ，他也能自動根據函數名稱來判斷，並幫你呼叫。</p>
<p>但這樣就會遇到一個問題，它把所有Controller裡面的Method都當成Action來呼叫了，而同時request body又只能接受一個複雜類型的參數。</p>
<p>因此才會噴這個錯誤。</p>
<p>那，為甚麼這問題我卻從來沒遇過呢?</p>
<p>因為筆者習慣將Controller內部的函數，都設定為private(因為都是自用)。</p>
<p>所以當函數設定為private就不會把它當成Action來呼叫使用，也因此這問題我從來沒發生過。</p>
<p>而同事遇到的這個問題，正是因為他把Controller內部的函數，統一宣告為public，因此被當作Action來呼叫，才會有這個問題。</p>
<font style="color:red"> 
那，如果真的想要使用public來進行呼叫呢? <br>
就必須要在函數上加上 [NonAction] 的標籤，讓編譯器知道這個函數並不是一個Action。
</font>

<p>因此只需要加上就可以避免此問題。</p>
<p>也可以使用停用推斷規則來解決此問題：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/16b3d44b-5058-4f14-ba9b-891d4f68b141/1606448097.png" alt="停用推斷規則"></p>
<font style="color:red">
但筆者還是建議，若是複雜的商業邏輯，需要額外抽成函數來撰寫的話，應該要額外建立類別來處理業務邏輯(也就是BAL)

<p>如果只是圖方便想直接讓Controller呼叫使用的話，也建議改成private做使用，除非萬不得已，不然建議不要設定成public，並使用 [NonAction]來宣告。<br></p></font><p></p>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>.NETCore</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - ES6 箭頭函數</title>
    <url>/2017/04/22/JavaScript-ES6-%E7%AE%AD%E9%A0%AD%E5%87%BD%E6%95%B8/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>箭頭函數(Fat arrow functions）是一個來自ECMAScript 2015（又稱ES6）的全新特性。</p>
<p>簡單的來說，是ES6版才有的新功能</p>
<p>箭頭函數的產生，主要為：更簡潔的語法 讓父類別共享關鍵字this。</p>
<span id="more"></span>
<p>這樣講可能有些許模糊，我們帶個下面的例子讓大家看一下就知道了。</p>
<blockquote>
<p>傳統JavaScript 的寫法</p>
</blockquote>
<p>傳統的JavaScript函數語法並沒有提供任何的靈活性，每一次你需要定義一個函數時，你都必須輸入function () {}。這樣的一個架構</p>
<p>但是在ES6版之後 為什麼大家的會這麼喜歡用它，有一個不可忽略的原因就是它有更簡潔的函數語法。</p>
<p>更簡潔的函數語法在有大量呼叫函數的情況下有特別明顯的好處。</p>
<p>以下例子的目的是使用jQuery來展示一個每秒都會更新的時鐘：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.current-time&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">text</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>但是當我想要在setInterval中使用this來引用DOM元素時，很不幸，我們得到的只是一個屬於函數自身的this。</p>
<p>而一個通常的解決辦法是定義一個that或者self變量：（如果不懂為什麼的話可以參考一下我之前撰寫過的一篇關於 JavaScript  this的介紹文）<br><a href="./JavaScript-%E6%B7%BA%E8%AB%87%E7%95%B6%E5%89%8D%E7%9A%84this%E5%B0%8D%E8%B1%A1%E6%AD%B8%E5%B1%AC.md">JavaScript - 淺談當前的this對象歸屬</a><br>但當使用了ES6當中的箭頭函數時，這個問題就不復存在了。因為它不產生屬於它自己函數內的this：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;.current-time&#x27;).each(function () &#123;</span><br><span class="line">  setInterval(() =&gt; $(this).text(Date.now()), 1000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>就如同剛剛上面開頭所說的， 讓父類別共享關鍵字this 因此可以利用箭頭函數來達到我們所想的目的。</p>
<p>而箭頭函數就相當於匿名函數，並且簡化了函數定義。箭頭函數有兩種格式，一種像上面的，只包含一個表達式，連<code>&#123; ... &#125;</code>和return都省略掉了。還有一種可以包含多條語句，這時候就不能省略<code>&#123; ... &#125;</code>和<code>return</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">score =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有沒有發現和 lambda 表達式類似xD</p>
<blockquote>
<p>arguments 屬性</p>
</blockquote>
<p>然而在箭頭函數與普通函數還有一個區別就是，它沒有自己的arguments 屬性 </p>
<p>在傳統的JavaScript 我們可以透過arguments Array 來取得函數的參數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是在箭頭函數當中，是沒有屬於自己的this 與 arguments Array ，有興趣的人可以試試看以下的程式碼就可以了解了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TT</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">temp</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
  </entry>
  <entry>
    <title>CSS - FlexBox 教學</title>
    <url>/2018/05/02/CSS-FlexBox-%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>回想起以前在做網頁設計的時候，排版一直是最頭痛的前置作業。</p>
<p>要排出好看、順暢的版型之外，還要能符合手機版瀏覽，不能跑版。</p>
<p>想想真的是很麻煩。</p>
<p>幸虧現在有很多 CSS的FrameWork可以讓我們使用：</p>
<p>BootStrap、Semantic UI、Metro UI、jQuery UI 等</p>
<p>這些都是我們耳熟能詳，並且常用的。</p>
<p>那，有沒有可能是我不需要使用 CSS的FrameWork，依然可以幫助我快速排好版型，且又不會亂掉的？</p>
<p>那就是——FlexBox。</p>
<span id="more"></span>
<p>FlexBox是最近這一年多以來相當盛行的一個排版神器。</p>
<p>我們可以透過幾行簡單的語法，就可以將我們想要呈現的內容，存放在我們想要的區塊內。</p>
<p>而其支援程度，也因為現在大部分的瀏覽器均已支援，所以掀起了一股熱潮。</p>
<p>我們可以在 <a href="https://caniuse.com/#feat=flexbox">Caniuse</a> 網站看到目前各大瀏覽器所支援的程度：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/ca2fae2c-d1d1-443b-83a1-eb793a30581c/1525241272_99933.png"></p>
<p>其支援程度高達 98%，這也就是為什麼大家非常喜歡 FlexBox的原因。</p>
<p>除了簡單、好用以外，最重要的是：<font color="red">支援程度相當高，讓我們不必再為了某瀏覽器而傷透腦筋。</font></p>
<p>那麼現在就來看一下FlexBox到底是什麼東西吧！</p>
<h3 id="FlexBox-佈局模式示意圖"><a href="#FlexBox-佈局模式示意圖" class="headerlink" title="FlexBox 佈局模式示意圖"></a>FlexBox 佈局模式示意圖</h3><p>在使用FlexBox之前，我們需要先知道他的佈局模式，才能讓我們有效的運用。</p>
<p>根據 W3C 的文章介紹，FlexBox的模型可以用下圖來解釋。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/ca2fae2c-d1d1-443b-83a1-eb793a30581c/1525241598_89066.png"></p>
<p>在圖中，我們發現有許多條線相交，那麼每一條線各代表什麼意思？</p>
<p>就讓讀者來帶你看看。</p>
<p>首先我們會發現圖中最外面用了一層 Flex Container所包覆著，這代表要使用FlexBox之前，我們需要給定一個區塊，讓這個區塊內的元件具有 Flex的效果。</p>
<p>而Flex Container這個容器當中，一共放了兩個 Flex Item，也就是兩個區塊內容的顯示。</p>
<p>其中我們發現到，這張圖主要倍 Main以及Cross所劃分。</p>
<p>你可以想成：Main就是水平，而Cross就是垂直。</p>
<p>至於Start、End應該就不用多說了，就是開始以及結束。</p>
<p>所以你可以把FlexBox解釋成：在一個容器當中，我們將每一個區塊都視為一個 Item<br>其中每一個Item的擺放位置，我們可以透過 Main、Cross這兩條線來去劃分。最終將我們的區塊放入我們想要的位置當中。</p>
<p>接下來我們來看，FlexBox到底有哪些屬性可以用吧！</p>
<p>我們可以在 <a href="https://www.w3schools.com/css/css3_flexbox.asp">W3CSchool</a> 當中查到下表：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/ca2fae2c-d1d1-443b-83a1-eb793a30581c/1525242242_70391.png"></p>
<p>這些屬性看似很多，但其實實際了解之後你會發現：其實真的還好，而且很好用。</p>
<p>那看完了屬性之後，我們來自己撰寫練習看看吧！</p>
<p>首先我們可以先準備一段Html的Code：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 這是一段很簡單的Code，主要就是將五個items放入FlexBox區塊當中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這時候我們只需要將最外圍的Container賦予它FlexBox的效果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  宣告為 flex box */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  將每一個items賦予border，讓我們比較好看出效果 */</span></span><br><span class="line"><span class="selector-class">.flex-container</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>; </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這時候會呈現這樣的效果：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/ca2fae2c-d1d1-443b-83a1-eb793a30581c/1525243749_49765.png"></p>
<p>這時候我們的Container已經是FlexBox了。這時候我們先來介紹幾個常用到的屬性：</p>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>flex-wrap可以讓我們決定當頁面寬度過窄，以致於內容無法完整呈現的時候，是否要進行換行。</p>
<p>預設是 nowrap，也就是不換行。</p>
<p>接下來我們在container中，加入flex-wrap</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這時候我們就會發現：當內容物不夠空間呈現的時候，就會自動換到下一行。就不會像以前一樣直接被遮住無法顯示。<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/ca2fae2c-d1d1-443b-83a1-eb793a30581c/1525244250_61934.png"></p>
<p>接著我們來看第二個屬性：</p>
<h3 id="Justify-Content"><a href="#Justify-Content" class="headerlink" title="Justify Content"></a>Justify Content</h3><p><code>Justify Content</code> 是決定我們每一個 Items的水平對齊方式，一共有五種水平對齊方式，我們可以透過以下的Code來展示一下：</p>
<p>首先ㄧ樣先給一個html，這裡我們用三個items來看呈現效果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"> Justify Content</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接著我們加上Justify Content 的屬性給Container</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Justify Content */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jc-start</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start; <span class="comment">/* 靠左對齊 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jc-end</span> &#123; </span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end; <span class="comment">/* 靠右對齊 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jc-center</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center; <span class="comment">/* 置中對齊 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jc-space-around</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around; <span class="comment">/* 分散對齊(前後留邊) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jc-space-between</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between; <span class="comment">/* 分散對齊(前後不留邊) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們可以看看呈現的效果：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/ca2fae2c-d1d1-443b-83a1-eb793a30581c/1525245320_5845.png"></p>
<p>看完水平之後，接下來我們來看垂直：</p>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><code>align-items</code>是決定我們每一個 Items的垂直對齊方式，一共有五種垂直對齊方式。其中比較特別的是，還可以針對內容長短來自動增加Div高度。</p>
<p>我們可以透過以下的Code來展示一下：</p>
<p>首先一樣先準備我們的CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ai--start</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ai--end</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ai--center</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ai--stretch</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ai--basseline</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: baseline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著為了能夠顯示出效果，我們需要再針對每一個Div Item給予不一樣大小的內容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Align Items<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container box-2 jc--between ai--start&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>flexbox<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Basic concepts of flexbox</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                The Flexible Box Module, usually referred to as flexbox, was designed as a one-dimensional layout model, and as a method that could offer space distribution between items in an interface and powerful alignment capabilities. This article gives an outline of the main features of flexbox, which we will be exploring in more detail in the rest of these guides.</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接下來我們來看一下呈現的效果：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/ca2fae2c-d1d1-443b-83a1-eb793a30581c/1525497063_57138.png"></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/ca2fae2c-d1d1-443b-83a1-eb793a30581c/1525497077_06336.png"></p>
<p>從結果圖來看，我們很清楚可以知道 Start、End、以及Center的效果。</p>
<p>但其中比較特別的是Stretch這個屬性。</p>
<p>這個屬性會自動去判斷我們每一個Items長度，並且給予每一個Items最大的高度位置，來讓我們的Items都維持相同的高度。</p>
<p>由於FlexBox屬性不少，因此筆者這裡僅列出常用到的屬性來做範例。</p>
<p>若想深入了解可以點選上方表格的連結，裡面有詳盡的解釋。</p>
<p>如果看完還是不懂的話，筆者建議可以透過小遊戲來學習FlexBox。</p>
<p>在國外，有大神們做出FlexBox的青蛙小遊戲，共有24關。</p>
<p>每一關介紹一種屬性，我們需要設法利用屬性，幫助青蛙回到屬於自己的荷葉上。</p>
<p>是一款滿有趣又能學習FlexBox的小遊戲。</p>
<p>有興趣的讀者們可以點選下方連結來開始遊玩：</p>
<p><a href="https://flexboxfroggy.com/#zh-tw">FlexBox Froggy</a></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/ca2fae2c-d1d1-443b-83a1-eb793a30581c/1525497917_65106.png"></p>
<p>最後，希望大家都能快速上手這個超好用的FlexBox排版神器。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>FlexBox</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Hoisting(提升) 介紹</title>
    <url>/2018/05/02/JavaScript-Hoisting-%E6%8F%90%E5%8D%87-%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>就在剛剛，看完了Will保哥的技術交流直播，在直撥最後結尾的時候</p>
<p>保哥對於Junior的前端工程師表示，他面試過的Devoloper幾近九成沒聽過 Hoisting是什麼東西。</p>
<p>因為對於直接接觸網頁、JavaScript的開發者來說，難免會lost掉一些基本觀念。</p>
<p>於是這篇文章就誕生了。</p>
<span id="more"></span>
<p>根據 <a href="https://www.w3schools.com/js/js_hoisting.asp">W3School</a>  的網頁介紹中，我們發現第一句話就這樣寫著：</p>
<blockquote>
<p>Hoisting is JavaScript’s default behavior of moving declarations to the top.</p>
</blockquote>
<p>翻譯成中文的意思就是 ，在JavaScript程式語言當中，它會自動幫你把你有宣告的變數、Function自動拉至最上方。</p>
<p>而這樣的行為，我們就稱為 <code>Hoisting （提升）</code>。</p>
<p>以往我們在撰寫程式的時候，我們的觀念告訴我們：</p>
<blockquote>
<p>程式碼就是由上而下執行，所有的變數、方法都需要經過宣告才能使用。</p>
</blockquote>
<p>於是，當我們在撰寫像是Java、C#、Python等程式語言的時候，光是第一關 Compile 就不會過了。</p>
<p>原因是因為變數在還沒宣告的時候，並不會分配記憶體空間，自然就沒辦法操作其變數了。</p>
<p>但是JavaScript本身語言的特性，有著 Hoisting 的效果，所以即便你在使用變數後才進行變數宣告依然不會有Error發生。</p>
<p>所以相信大家在撰寫的時候都會有著這樣的寫法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Hello</span>(); <span class="comment">// Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在變數上我們可以這樣寫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">b = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 200</span></span><br><span class="line"><span class="keyword">var</span> b;</span><br></pre></td></tr></table></figure>
<p>這時候會發現，因為Hoisting的效果，只要我們在使用後有進行宣告，那麼程式就不會有Error，也不會有undefined的情況發生。</p>
<p>但是有一種情況例外：</p>
<blockquote>
<p>JavaScript Initializations are Not Hoisted</p>
</blockquote>
<p>這句話的意思是：在JavaScript語言當中，如果將此初始化，則不會被 Hoisted (提升)。</p>
<p>我們可以來試試看：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Hello</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Hello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在我們寫完這一段Code，並執行時，我們會得到以下錯誤：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/127c9070-73bb-4aee-b3c4-1d903ac8333c/1525194410_18703.png"></p>
<p>錯誤訊息告訴我們：Hello不是一個function。</p>
<p>而之所以會有這個錯誤訊息，正是呼應到剛剛上方的那一句話：</p>
<blockquote>
<p>JavaScript Initializations are Not Hoisted</p>
</blockquote>
<p>我們首先先在第一行呼叫Hello這個Function。</p>
<p>接著才將function指向給Hello這個變數。</p>
<p>其中第二行的寫法，它並不是一個宣告的行為，而是初始化的動作。</p>
<p>我宣告一個Hello的function，並將其指派給Hello這個變數。</p>
<p>這樣的動作，我們稱之為Initialize(初始化)。</p>
<p>於是，第二行就不會有  Hoisting 的效果。</p>
<p>而同樣的，如果我們針對變數也這樣撰寫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">b++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>;</span><br></pre></td></tr></table></figure>

<p>那麼會發現印出來的b，會是NaN。</p>
<p>那至於為什麼是NaN呢？</p>
<p>跟上述ㄧ樣的道理，因為初始化並不會被Hoisting(提升)。</p>
<p>因此，第一行的b就不會有宣告的效果，所以若單獨把b印出來，結果會是 undefined。</p>
<p>而我們又把b給進行了++。</p>
<p>於是 undefined 再強制進行了+1的動作，這時候我們就會得到NaN的結果了。</p>
<p>看到這裡相信各位對於JavaScript的各種巫術感到非常頭痛。</p>
<p>因此在最後，W3School  在文末也表示：</p>
<font color="red">
對許多開發者來說，Hoisting(提升)是一種未知或被忽視的JavaScript行為。

<p>如果開發人員不理解，那麼程式可能就會Error。</p>
<p>為了避免錯誤，請在每個任何變數或是方法使用前，都先進行宣告。<br></p></font><p></p>
<p>希望看完這篇的讀者能夠對於 JavaScript的 Hoisting 能夠有一定的認知。</p>
<p>但是最好還是都在使用前都進行宣告，否則未來維護你Code的人可是會痛不欲生的（笑</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Hoisting</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - 淺談當前的this對象歸屬</title>
    <url>/2017/01/09/JavaScript-%E6%B7%BA%E8%AB%87%E7%95%B6%E5%89%8D%E7%9A%84this%E5%B0%8D%E8%B1%A1%E6%AD%B8%E5%B1%AC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我們都知道JavaScript跟其他語言在物件導向有很大的不同</p>
<p>其中以this為最大的差異點，很多人常常對於這個this搞得一個頭兩個大的</p>
<p>而該怎麼判斷this目前指向的對象是誰呢？ 則是看對於在執行this前是否有物件。</p>
<p>如果有物件，則this代表著該物件; 倘若沒有物件，則this代表著整個window</p>
<p>這聽起來很饒舌，做個範例來看就會知道了</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>); &#125;</span><br><span class="line">    <span class="title function_">foo</span>(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">obj</span>();</span><br><span class="line">obj.<span class="title function_">f</span>(); </span><br></pre></td></tr></table></figure>
<p>在上述的範例當中，一開始呼叫 <code>obj.f()</code>  這時候一開始console內的<code>this.x</code>會輸出20</p>
<p>但是接著在<code>f()</code>的最後一行，呼叫了<code>foo()</code>  此時，console內的<code>this.x</code> 則會輸出10</p>
<p>而不會是大家所想的20，原因在於<code>foo()</code>  內的this，因為前面並沒有物件，因此指向的是全域變數中的x，所以才會輸出10</p>
<p>那…該怎麼做才會能能達到我們預期的 20,20呢？</p>
<p>這時候我們就必須要先將物件內的this儲存起來，像這樣子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">    <span class="keyword">var</span> js = <span class="variable language_">this</span>; <span class="comment">//先將當前f()內的this利用js變數儲存起來。 因為當前的this指的是這個obj物件</span></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(js.<span class="property">x</span>); &#125; <span class="comment">//使用js取得obj這個物件內的x值</span></span><br><span class="line">    <span class="title function_">foo</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">obj</span>();</span><br><span class="line">obj.<span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>
<p>我們可以透過像上面的code，預先將f()內的this暫存起來，這樣變數js就永遠都會代表obj這個物件</p>
<p>就不會再指向整個window了</p>
<p>不過這樣的做法，並不是全然之計，因為每當你重新new這個物件時，裡面的this就會被自動刷新</p>
<p>而這個問題，我們留在下一章來進行探討。<br>下一章的<a href="./JavaScript-%E8%A7%A3%E6%B1%BA%E5%A4%9A%E6%AC%A1%E5%AF%A6%E9%AB%94%E5%8C%96%E7%89%A9%E4%BB%B6%E6%9C%83%E9%80%A0%E6%88%90%E7%89%A9%E4%BB%B6%E7%84%A1%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8.md">連結</a>在這唷！ </p>
<p>有興趣的讀者可以研究看看</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript- 解決多次實體化物件會造成物件無法正常使用</title>
    <url>/2017/01/09/JavaScript-%E8%A7%A3%E6%B1%BA%E5%A4%9A%E6%AC%A1%E5%AF%A6%E9%AB%94%E5%8C%96%E7%89%A9%E4%BB%B6%E6%9C%83%E9%80%A0%E6%88%90%E7%89%A9%E4%BB%B6%E7%84%A1%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因為JavaScript的物件導向與一般大家所認識的物件導向有所不同</p>
<p>因此上一篇文章當中我們有提到，在js的OOP當中，如果一開始在建構元的時候就先將物件內的this儲存起來</p>
<p>那麼之後就可以針對這個物件的this來去做進一步的使用</p>
<p>但是如果今天我這個物件需要進行多次的實體化，這時候就會發現你先前的物件會無法正常的使用</p>
<span id="more"></span>
<p>在我們JavaScript的物件導向中我們需要使用變數來將目前的this儲存起來</p>
<p>目的在於運用這樣的方式：</p>
<font color="red">
可以確保自己存取的是目前物件內的變數（因為以目前這樣的寫法如果用了整排的this會比較難看懂
</font>

<p>因此這時候你的Code大概會長這個樣子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> js; <span class="comment">//先準備好變數要將物件JavaScript儲存起來</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">JavaScript</span>(<span class="params"></span>)</span><br><span class="line">  &#123;  </span><br><span class="line">      js = <span class="variable language_">this</span>; <span class="comment">//儲存當前狀態</span></span><br><span class="line">      js.<span class="property">num</span> = <span class="number">100</span>;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">JavaScript</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">count</span> = <span class="keyword">function</span> (<span class="params"></span>)</span><br><span class="line">  &#123;</span><br><span class="line">      js.<span class="property">num</span> += <span class="number">100</span>;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> js1 = <span class="keyword">new</span> <span class="title class_">JavaScript</span>();</span><br><span class="line">  js1.<span class="title function_">count</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(js1.<span class="property">num</span>); <span class="comment">//200</span></span><br></pre></td></tr></table></figure>
<p>但是這樣就會出現一個缺點：</p>
<p>「假設今天你的這個物件，他是一個元件，需要被重複的使用，那麼當在new第二個物件時就會發現先前的物件完全起不了作用。」</p>
<p>什麼意思呢？</p>
<p>我們用下面的範例Code來為大家做個解說。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> js;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">JavaScript</span>(<span class="params"></span>)</span><br><span class="line">   &#123; </span><br><span class="line">      </span><br><span class="line">       js.<span class="property">num</span> = <span class="number">100</span>;</span><br><span class="line">	   </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title class_">JavaScript</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">count</span> = <span class="keyword">function</span> (<span class="params"></span>)</span><br><span class="line">   &#123;</span><br><span class="line">       js.<span class="property">num</span> += <span class="number">100</span>;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> js1 = <span class="keyword">new</span> <span class="title class_">JavaScript</span>(); <span class="comment">//建立JavaScript的物件js1</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">var</span> js2 = <span class="keyword">new</span> <span class="title class_">JavaScript</span>(); <span class="comment">//建立JavaScript的物件js2</span></span><br><span class="line">   js1.<span class="title function_">count</span>(); <span class="comment">//將物件js1的值＋100</span></span><br><span class="line"></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(js1.<span class="property">num</span>); <span class="comment">// 100</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(js2.<span class="property">num</span>); <span class="comment">// 200</span></span><br></pre></td></tr></table></figure>
<p>這時候各位有沒有發現到一個問題？ </p>
<p>當我建立了第二個物件的時候，由於我的js是全域變數，因此我的this永遠都會是最新的物件狀態</p>
<p>也就是儘管我不論怎麼去針對第一個物件去呼叫函數進行更改，都會更改到第二個物件。</p>
<p>而這個問題，可能大家會覺得，那<font color="red">我就在第二個物件生成前先去針對第一個物件進行操作就好拉！</font></p>
<p>但是，假設如果今天我的這個物件，是一個行道樹的物件</p>
<p>我每new一個物件，就是產生出一棵樹出來，那麼當我把樹都new完之後</p>
<p>卻發現我只能針對最後一顆樹進行操作，這樣的邏輯挺不合理的，對吧？</p>
<p>因此從這個地方我們了解到，<font color="red">我們不僅要將程式給物件化，還需要讓程式能夠具備重複使用的功能才行</font></p>
<p>因此，我們將Code重新進行改寫，將JavaScript改為<font color="red">封閉式寫法</font></p>
<p>如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">JavaScript</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//建立一個名為JavaScript的類別</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">JavaScript</span>(<span class="params"></span>) &#123; <span class="comment">//建構元初始化num變數</span></span><br><span class="line">          </span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">100</span>; </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title class_">JavaScript</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Count</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//新增函數Count，並執行累加一百的方法</span></span><br><span class="line">           </span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">num</span> += <span class="number">100</span>;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">JavaScript</span>;  <span class="comment">//返回當前的JavaScript類別</span></span><br><span class="line">   &#125;());<span class="comment">// () 代表立即執行</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> js = <span class="keyword">new</span> <span class="title class_">JavaScript</span>();</span><br><span class="line">   <span class="keyword">var</span> js1 = <span class="keyword">new</span> <span class="title class_">JavaScript</span>();</span><br><span class="line">   js.<span class="title class_">Count</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(js.<span class="property">num</span>);  <span class="comment">// 100</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(js1.<span class="property">num</span>); <span class="comment">// 200</span></span><br></pre></td></tr></table></figure>
<p>從上方的範例程式碼中我們可以發現到改動的地方在於整個JavaScript</p>
<p>我們將JavaScript進行了封閉化，可以看到程式碼當中最後我們 return JavaScript</p>
<p>並且在最後面多加了()</p>
<p>而為什麼要這樣做呢？</p>
<p>因為這樣的寫法，變成是有點類似其他語言物件導向的概念</p>
<p>JavaScript這個類別要先實體化，就像使用JQuery一樣<br>讀進來的時候會需要先建立這個物件，你才能使用裡面的東西</p>
<p>就好像是我們封裝完之後，需要實體化他才能做使用<br>()就是執行你的JavaScript，並得到return JavaScript這個物件<br>這樣你在外面才能使用new JavaScript.JavaScript</p>
<p>而這樣的寫法還有一個好處，因為類似於我們往常所使用的類別，因此在裡面即使使用this來去對物件進行存取</p>
<p>也比較不容易迷失方向，因為只要在裡面，this代表的就是當前的這個物件。</p>
<p>另外，如果這樣的寫法你沒辦法接受，或是覺得這樣的方式很難看懂，筆者建議你可以學習TypeScript</p>
<p>TypeScript是由一位國外專門寫C#的人開發出來的，最後被M$收購走了</p>
<p>如果用TypeScript來呈現剛剛的Code 大概會長這個樣子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JavaScript</span> &#123;  <span class="comment">//類別</span></span><br><span class="line">    <span class="attr">num</span>: number;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; <span class="comment">//建構子</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Count</span>() &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> += <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> js =  <span class="keyword">new</span> <span class="title class_">JavaScript</span>();</span><br><span class="line"><span class="keyword">var</span> js1 = <span class="keyword">new</span> <span class="title class_">JavaScript</span>();</span><br><span class="line">js.<span class="title class_">Count</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(js.<span class="property">num</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(js1.<span class="property">num</span>);</span><br></pre></td></tr></table></figure>
<p>有沒有瞬間覺得格外親切許多呀？</p>
<p>如果不喜歡js，那麼也許你可以考慮ts，都是不錯的選擇唷！</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET - 在VS Code 中用.net core 安裝 Entity Framework</title>
    <url>/2018/06/16/NET-%E5%9C%A8VS-Code-%E4%B8%AD%E7%94%A8-net-core-%E5%AE%89%E8%A3%9D-Entity-Framework/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>.Net Core 出來了很久，作為一個.Net的忠實信徒，卻這麼久沒有去觸碰它，實在慚愧。</p>
<p>最近，因為碩班實在忙碌，很多珍貴技術想碰卻苦無時間，甚至連發部落格的時間都少得可憐。</p>
<p>一直想用 Angular6 + .NET Core 2 開發一套系統，於是花了一點時間鑽研一下文件。</p>
<p>而身為.NET 愛好者，方便的工具肯定是少不了。以前在寫 WebAPI的時候，簡單的 EF + Code First就可以讓我省去大半開發時間</p>
<p>於是現在轉換到了.NET Core，當然也要來好好利用這些工具。</p>
<span id="more"></span>

<p>基本安裝.NET Core的教學也很簡單，只需要安裝 <a href="https://www.microsoft.com/net/download/macos">.NET Core  SDK</a></p>
<p>註：此連結為 MacOS SDK下載，Windows用戶請自行切換</p>
<p>接著下一步到底就可以使用 .NET Cli了。</p>
<p>如果有看到下圖就代表你安裝成功了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet --info</span><br></pre></td></tr></table></figure>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/be4ed7ee-7296-4341-bd60-99a3fe6184f4/1529137632_94568.png"></p>
<p>接下來我們來回歸到重點，要如何安裝 Entity framework (EF) ?</p>
<p>在 .net Core SDK中，預設是沒有 EF的，因此需要額外安裝 packages 才可以使用。</p>
<p>於是我們打開我們的 Command Line 輸入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Design</span><br></pre></td></tr></table></figure>
<p>這時會將 EntityFrameworkCore 的 package安裝到你的專案中。</p>
<p>你以為這樣就可以使用了嗎？</p>
<p>不，還沒完！</p>
<p><del>如果光是這樣簡單我就不會寫這篇文章了。</del></p>
<p>接著，打開你的 Project，找到 專案名稱.csproj</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/be4ed7ee-7296-4341-bd60-99a3fe6184f4/1529138208_60082.png"></p>
<p>點進去後，將這一段 XML加入進去，讓我們待會的 dotnet Cli 可以知道要去這裡面找到 EntityFrameworkCore的 packages。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">DotNetCliToolReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.EntityFrameworkCore.Tools.DotNet&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;2.0.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>按下存檔之後，我們繼續打開 Command Line 輸入dotnet ef 試試。</p>
<p>如果是下圖，恭喜你，成功了一半了！</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/be4ed7ee-7296-4341-bd60-99a3fe6184f4/1529138461_56441.png"></p>
<p>但如果你跟我一樣不幸運，出現的是這一段紅字：</p>
<font color="red"> 
version for package `Microsoft.EntityFrameworkCore.Tools.DotNet` could not be resolved.
</font>

<p>不用擔心，我也解決了。我在這個網頁中找到的<a href="https://stackoverflow.com/questions/43375734/version-for-package-microsoft-entityframeworkcore-tools-dotnet-could-not-be-re">答案</a></p>
<p>那麼你就需要再輸入 <code>dotnet restore</code></p>
<p>就可以完成安裝。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>.net core  Entity Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET 如何動態生成dynamic物件-ExpandoObject</title>
    <url>/2020/01/05/NET-%E5%A6%82%E4%BD%95%E5%8B%95%E6%85%8B%E7%94%9F%E6%88%90dynamic%E7%89%A9%E4%BB%B6-ExpandoObject/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以來都知道Dapper在做存取資料庫方面非常的簡單，只需要給予該SQL語法以及回傳的Model型別，就可以將對應的資料回傳並且轉換成List。</p>
<p>而其中Dapper還有一個最厲害的地方就是：不用預先宣告強型別，查詢資料表後就可以直接傳回 dynamic 的List。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var list = cn.Query(&quot;SELECT Name,Class FROM Student&quot;).ToList();</span><br></pre></td></tr></table></figure>
<p>該語法將傳回<code>List&lt;dynamic&gt;</code>，因此不需要特別建立Model也可以將該資料回傳並作使用。</p>
<p>因此開始思考，如何透過dynamic動態生成物件？</p>
<span id="more"></span>

<p>ExpandoObject是在.Net Framework 4之後出現的一個類別 ，可以幫助我們為物件動態的加入或移除屬性成員。</p>
<p>其用法為：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dynamic data = new ExpandoObject();</span><br><span class="line">data.Name = &quot;Leo&quot;;</span><br><span class="line">data.Sex= &quot;Male&quot;;</span><br></pre></td></tr></table></figure>

<p>我們需要搭配dynamic才能夠存取我們指定的Name,Sex欄位。</p>
<p>但是僅僅這樣寫，雖然可以自動幫我們建立Namx,Sex欄位，並給予值。但若是在欄位名稱未知的情況下想要動態建立Model，可就沒辦法了。</p>
<p>如上面所說，若需要將撈出來的SQL資料，根據其欄位建立Model並賦予值，那肯定無法做到。</p>
<p>但值得一提的是，由於ExpandoObject本身就實作了<code>IDictionary&lt;string, object&gt;</code>，因此若是有必要我們也可以直接把它轉型成<code>IDictionary&lt;string, object&gt;</code>來操作，讓該物件擁有Add以及Remove的方法，為物件動態的加入或移除屬性成員。</p>
<p>因此撰寫上我們會改為這樣的寫法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var MyDynamic = new ExpandoObject() as IDictionary&lt;string, Object&gt;;</span><br><span class="line">MyDynamic.Add(&quot;Name&quot;, &quot;leo&quot;);</span><br><span class="line">MyDynamic.Add(&quot;Sex&quot;, &quot;Male&quot;);</span><br></pre></td></tr></table></figure>

<p>透過這樣的方式，將我們的屬性利用字串的方式Add至MyDynamic物件中，這樣我們就能存取Name以及Sex的值了。</p>
<p>因此若想像Dapper一樣回傳成<code>List&lt;dynamic&gt;</code>的集合資料的話，最終的版本可以寫成這樣：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 本範例使用SqlDataReader做資料庫存取</span><br><span class="line"></span><br><span class="line">    List&lt;dynamic&gt; list = new List&lt;dynamic&gt;();</span><br><span class="line">    SqlCommand command = new SqlCommand(sql, connection);</span><br><span class="line">    SqlDataReader reader = command.ExecuteReader();</span><br><span class="line">    while (reader.Read())</span><br><span class="line">    &#123;</span><br><span class="line">      IDictionary&lt;String, Object&gt; MyDynamic = new ExpandoObject() as IDictionary&lt;string, Object&gt;;</span><br><span class="line"></span><br><span class="line">      for (int i = 0; i &lt; reader.FieldCount;i++) // 透過FieldCount 取得該列資料中的所有欄位數目</span><br><span class="line">      &#123;</span><br><span class="line">        MyDynamic.Add(reader.GetName(i), reader[i]); //動態將SQL存取到的欄位以及Value 放入MyDynamic中</span><br><span class="line">      &#125;</span><br><span class="line">       list.Add(MyDynamic);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>透過這樣的方式，我們就可以像Dapper一樣，不需要建立Model類別，也能輕鬆的將資料存取回來，並轉換為List做後續操作。</p>
<p>另外，仔細追查Dapper的原始碼，我們也可以發現到，Dapper之所以能做到不需要指定Model型別，也能回傳dynamic的List的原因，也是透過實作了<code>IDictionary&lt;string, object&gt;</code>。</p>
<p>因此在dapper中，外表看似是dynamic其實骨子裡是DapperRow的型別。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/e1371ca9-eefc-4e94-a6a2-7328c0c5cd85/1578196167_77935.png"></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET 如何讓 WebAPI 支援 Session ?</title>
    <url>/2017/05/09/NET-%E5%A6%82%E4%BD%95%E8%AE%93-WebAPI-%E6%94%AF%E6%8F%B4-Session/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果你有工作上的需求需要在WebAPI當中加入Session的功能</p>
<p>那麼這一篇也許對你會有幫助。</p>
<p>最近筆者為了案子而開始撰寫.NET WebApi</p>
<p>其中有些資訊需要儲存在Session當中。</p>
<span id="more"></span>
<p>於是撰寫了以下的Code想要將資訊寫入Session當中：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> session = System.Web.HttpContext.Current.Session; <span class="comment">//宣告Session</span></span><br><span class="line">session.Add(<span class="string">&quot;Auth&quot;</span>,LoginInfo.Auth); <span class="comment">//將認證資訊放入Session</span></span><br><span class="line"><span class="keyword">var</span> temp = session[<span class="string">&quot;Auth&quot;</span>];</span><br></pre></td></tr></table></figure>
<p>結果意外發現這段Code居然不能執行。</p>
<p>原因在於session是一個null，也就是說一開始就找不到Session這個物件了</p>
<p>自然也就無法使用。</p>
<p>爬了一些文後發現，WebApi由於是無狀態的，因此無法使用這樣的方式直接儲存</p>
<p>所以需要在檔案：<code>~/Global.asax</code>，內新增以下程式碼即可支援：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_PostAuthorizeRequest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">	System.Web.HttpContext.Current.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior.Required);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>WebAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJS 快速入門 教你如何快速理解RxJS用途以及使用方式</title>
    <url>/2017/05/14/RxJS-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%96%80-%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3RxJS%E7%94%A8%E9%80%94%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前陣子的高雄前端開發者大會，因為有其他工作要忙沒機會過去聽</p>
<p>後來聽到有去的朋友表示很難懂，發現聽不太懂</p>
<p>剛好昨天看完保哥介紹的影片趕緊寫下筆記複習一下</p>
<p>也順便分享給各位，讓更多人了解RxJS好用的地方</p>
<span id="more"></span>
<p>首先，在學RxJS之前我們要先理解到一件事</p>
<blockquote>
<p>為什麼我需要學習RxJS? 他有什麼好用的地方值得我去學習？<br>很多人在學習技術的時候，總是一窩蜂的直接學習，但是卻沒理解這個技術存在的原因，以及他解決了什麼樣的問題。</p>
</blockquote>
<p>因此在這邊跟大家快速講解一下RxJS為什麼那麼好用。</p>
<p>RxJS是一組可以用來處理非同步、以及同步事件的一個JavaScript Library</p>
<p>他能幫助你快速地使用像是Ajax、Server Work、SetTimeout 等其他非同步的事件</p>
<p>而它主要可以分為兩大類：</p>
<p>非同步的程式處理類，以及畫面事件處理類這兩種。</p>
<p>傳統上我們在使用非同步的時候，會需要確保我們的程式執行順序不會被打亂</p>
<p>因此在非同步的程式開發上，我們多半會採用 CallBack Function來解決問題，讓我們執行順序能正常Work</p>
<p>但是有些情況下你可能很常會遇到一些特殊的需求：<br><font color="red"><br>我需要先發送一個非同步的請求來處理使用者的資料，接著在資料回傳後使用者操作過後，又再發一個請求給Server<br></font></p>
<p>這時候我們的程式就會透過CallBack Function來幫助我們發送第二個請求</p>
<p>其中由於第二個請求你是寫在CallBack Function當中，因此你的程式碼大概會長得像這樣子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以jQuery Ajax為例：</span></span><br><span class="line"></span><br><span class="line"> $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="title class_">URLs</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            <span class="attr">dataType</span>:<span class="string">&#x27;text&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">                    <span class="comment">//將msg丟回前端做處理 處理完成之後 再發一個request回存資料庫</span></span><br><span class="line">                    <span class="comment">//這邊我就直接不寫處理的code 直接將msg做回傳</span></span><br><span class="line"></span><br><span class="line">                     $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                            <span class="attr">url</span>: <span class="title class_">URLs</span>,</span><br><span class="line">                            <span class="attr">data</span>: $(<span class="string">&#x27;#sentToBack&#x27;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">                            <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">                            <span class="attr">dataType</span>:<span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  </span><br><span class="line">                            <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">                              <span class="title function_">alert</span>(msg);</span><br><span class="line">                   </span><br><span class="line">                            &#125;,</span><br><span class="line"></span><br><span class="line">                           <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">xhr, ajaxOptions, thrownError</span>)&#123; </span><br><span class="line">                           <span class="title function_">alert</span>(xhr.<span class="property">status</span>); </span><br><span class="line">                           <span class="title function_">alert</span>(thrownError); </span><br><span class="line">                           &#125;</span><br><span class="line">                     &#125;);</span><br><span class="line">                   </span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">xhr, ajaxOptions, thrownError</span>)&#123; </span><br><span class="line">                   <span class="title function_">alert</span>(xhr.<span class="property">status</span>); </span><br><span class="line">                   <span class="title function_">alert</span>(thrownError); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p> 我們會發現這樣的寫法非常之亂，而且一直寫在CallBack Function當中不是一件好事。</p>
<p>這時候可能有些人會採用ES5當中 promise() 來幫助我們完成這些事情。</p>
<p>不過現在我們有RxJS來快速幫助我們做資料上的存取。</p>
<p>但是今天主要是帶各位快速認識RxJS的部分，因此發送請求的方式我們就留在Angular2 當中與Rxjs做搭配來介紹給各位。</p>
<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝<br>首先當我們在學RxJS的時候，我們需要先認識這幾個東西：</p>
<p><strong>• Observable 可觀察的物件</strong> – 代表一個觀察者，他可以去幫助我們持續監聽某一個事件或是做一件事情</p>
<p><strong>• Observer 觀察者物件</strong> – 代表一個接收觀察者情報的人，他可以得到觀察者所觀察的內容。其中有 next,error,complete 三個參數來幫助你在監聽到事件的時候可以做的事情</p>
<p><strong>• Subscription 訂閱物件</strong> – 代表發布命令請觀察者開始監聽</p>
<p><strong>• Operators 運算子</strong> – 在RxJS當中，有一百多個Operators可以使用，其中像是filter 他可以幫我們去過濾資料</p>
<p><strong>• Subject 主體物件</strong> – ，主要用來廣播收到的事件資料給多個 Observer (觀察者) 讓我們不需要一直執行Subscribe</p>
<p>好了，說了那麼多或許大家還是聽的霧煞煞的，因此我們直接上例子來看看吧！</p>
<p>我們可以到RxJS的官網上打開 開發人員工具 裡面就有載入了RxJS的套件供我們練習。</p>
<p>首先我們可以分為以下的步驟：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我們寫一個監聽事件讓使用者可以在畫面中任意點選，並回傳其事件的方法與內容輸出在console.log當中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.首先需要先建立 可以觀察的Observable 物件</span></span><br><span class="line"><span class="comment">有點類似 觀察者持續監聽某一個事件*/</span></span><br><span class="line"><span class="keyword">var</span> click  = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">fromEvent</span>(<span class="variable language_">document</span>,<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2.接著建立觀察者物件</span></span><br><span class="line"><span class="comment">簡單來說就是 當監聽到事件發生的時候 會需要做的事情/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var Observer = &#123;next:(x)=&gt; console.log(x)&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/* 訂閱這個監聽者 讓他開始持續做監聽*/</span></span><br><span class="line"><span class="number">3.</span> subs.<span class="title function_">subscribe</span>(<span class="title class_">Observer</span>)</span><br></pre></td></tr></table></figure>
<p>這時候我們就可以發現到在畫面當中可以截取到資訊：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/3f35f351-f0c8-43a3-8762-0cb653a6fd2b/1494566605_73479.png"><br>那當你想要終止這個監聽，不讓它在畫面上點選時，會回傳資訊到console中時，我們可以打上這樣的程式碼：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在執行subscribe的時候，利用一個變數來去接他</span></span><br><span class="line"><span class="comment">//subscribe 本身會回傳一個Observer的型別，這時候我們就可以使用unsubscribe()來停止監聽</span></span><br><span class="line"><span class="keyword">var</span> subs = click.<span class="title function_">subscribe</span>(<span class="title class_">Observer</span>);</span><br><span class="line">subs.<span class="title function_">unsubscribe</span>()</span><br></pre></td></tr></table></figure>
<p>這樣一來在畫面上點選，我們的資訊就不會出現了。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/3f35f351-f0c8-43a3-8762-0cb653a6fd2b/1494566845_87209.png"></p>
<p>OK!到了這邊各位如果都能了解的話，那麼恭喜各位在RxJS這邊的概念呢各位已經學習的差不多了</p>
<p>接下來我們可以來介紹一下關於 <strong>Operators</strong>運算子</p>
<p>剛剛前面有提到在RxJS當中有一百多個 <strong>Operators</strong> 可以使用</p>
<p>其中我大概列舉幾個簡單的來跟大家做個說明：</p>
<p><strong>filter</strong>  過濾條件  在建立Observable 物件的時候 可以使用filter 將觀察到的物件先做一些條件的過濾以及篩選</p>
<p><strong>take</strong>  取得次數  在建立Observable 物件的時候 可以使用take 限定觀察到的物件只回傳兩次後就停止監聽</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> subs = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">fromEvent</span>(<span class="variable language_">document</span>,<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">		.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="property">clientX</span>&gt;<span class="number">100</span>)  <span class="comment">//條件要X&gt;100</span></span><br><span class="line">		.<span class="title function_">take</span>(<span class="number">2</span>) <span class="comment">//取兩筆</span></span><br><span class="line">		.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span>=&gt;</span><span class="title function_">alert</span>(x)); 執行程式 </span><br></pre></td></tr></table></figure>

<p>那麼這樣的方式就可以發現到我們Observer只會回傳clientX超過100的數值的資料，並且回傳兩次後結束這個subscribe()</p>
<p>最後，如果這樣的一行到底的寫法不太能理解的話，那麼它完整的流程大概會長這樣：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//整體流程長這樣：</span></span><br><span class="line"><span class="keyword">var</span> click = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">fromEvent</span>(<span class="variable language_">document</span>,<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">click = click.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="property">clientX</span>&gt;<span class="number">100</span>) <span class="comment">// 要用click 再去接他 因為他會回傳篩選過後的結果</span></span><br><span class="line">click = click.<span class="title function_">take</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> sub = click.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line"></span><br><span class="line">	<span class="attr">next</span>: <span class="function"><span class="params">x</span>=&gt;</span> <span class="title function_">alert</span>(x),</span><br><span class="line">	<span class="attr">error</span>: <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">alert</span>(err),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>而RxJS的Operators 有太多太多了，在這邊我就不繼續介紹了，有興趣的可以看一下官方網站學習一下RxJS</p>
<p>另外，如果對於RxJS的Operators操作方式與流程想更近一步了解的，可以到RxMarbles看一下彈珠圖流程的變化</p>
<p>在這裡就不再多做額外說明了。</p>
<p>以上簡單的RxJS就介紹到這邊，其餘關於RxJS詳細實作的方式，我們留到Angular2時候再多做介紹。</p>
<p>今天帶完大家認識RxJS這個被眾多人喜愛的Library後，希望大家對於他的認知與理解可以更深一層。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>RxJS</category>
      </categories>
  </entry>
  <entry>
    <title>【CI CD實作】透過Github Webhook觸發Jenkins實現CI&amp;CD(四)</title>
    <url>/2023/02/10/Webhook%E8%A7%B8%E7%99%BCJenkins%E5%AF%A6%E7%8F%BECI-CD/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前面的文章中，我們已經成功設置好了Jenkins並讓Jenkins擁有sudo權限能更讓我們做更多事情了。<br>接下來就準備進到重頭戲，開始設定GitHub Webhook並觸發Jenkins來將專案Clone下來後，實現CI&#x2F;CD吧！</p>
<span id="more"></span>

<h3 id="設定Github-Webhook"><a href="#設定Github-Webhook" class="headerlink" title="設定Github Webhook"></a>設定Github Webhook</h3><p>首先登入到 GitHub，點選你希望更新時能透過 GitHub Webhook 觸發 Jenkins 的 Repository，點選 Settings 選取 Webhooks，再點選「add webhook」後輸入 &lt;你的Jenkins Server&gt;&#x2F;github-webhook&#x2F;</p>
<div style="color:red;font-weight:900;margin-bottom:10px;">
註：網址最後面一定要加上/github-webhook/
</div>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*z_W3UfV_fa9aCbsshvstGw.png"></p>
<p>這時候設定完後，返回後會發現會有一個錯誤的圖案，這是因為Github還沒有跟我們的Jenkins進行連接，等到第一次Clone後就會是綠燈了，請放心。</p>
<p>接著我們回到Jenkins</p>
<h2 id="Jenkins-設定"><a href="#Jenkins-設定" class="headerlink" title="Jenkins 設定"></a>Jenkins 設定</h2><p>首先在 Jenkins 首頁點選「New Item」：</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*62IikWEmw6AxRnlK94j-hA.png"></p>
<p>點選 Pipeline 後輸入你的Pipeline名稱：</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*lxXyir5SnVKq1xQ67HSwzw.png"></p>
<p>接著進入<strong>Configure</strong>後，我們先找到 <strong>General</strong><br>勾選「GitHub project」然後貼上你的 GitHub Repository URL<br><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*CWS0wqzOqfED3qTwcjm2Jg.png"></p>
<p><strong>Configure — Build Triggers:</strong><br>選取「GitHub hook trigger for GITScm polling」<br><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ZSHr-XSmKWSo6HePHNRSUw.png"></p>
<p><strong>Configure — Pipeline:</strong><br>接下來就可以開始設定當觸發Jenkins將專案拉下來之後，我們要做哪些事情。<br>Pipeline一般來說我們可以分為三個階段：Buid、Test、Deploy<br>當然你也可以自定義各種階段，基本上每一個階段就只是將內容分離出來，讓你比較好知道現在執行到哪裡，以及每一階段執行所需時間如何。</p>
<div style="color:red;font-weight:900;margin-bottom:10px;">
這裡與GitLab Runner最大不同在於每一階段產生的檔案都會保留，非常方便，不用再寫多餘的Code
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;打包專案&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Test&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;可以執行一些自動化測試項目&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Deploy&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;最後執行遠端部署指令&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>而由於筆者本身使用.NET6進行API開發，因此這邊同時也放上.NET版本給各位參考一下。但由於礙於公司機密，所以拿掉不少東西，再請各位多多包涵</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;cd API&#x27;</span><br><span class="line">                sh &#x27;dotnet build&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Deploy&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;sudo systemctl stop API.service&#x27;</span><br><span class="line">                sh &#x27;sudo rm -rf /專案存放位置&#x27;</span><br><span class="line">                sh &#x27;sudo mkdir /專案存放位置&#x27;</span><br><span class="line">                sh &#x27;sudo cp -r /專案存放位置. /Server 目錄位置&#x27;</span><br><span class="line">                sh &#x27;sudo systemctl start API.service&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到這裡基本上就完成的差不多了，最後我們實際上將Code推倒Github試試看：<br>我們可以注意到整體速度滿快的，從Build、Deploy 平均只花了10秒就完成。</p>
<p><img src="https://t45009037.p.clickup-attachments.com/t45009037/8e542c8d-3201-4607-b807-760a835e64f9/Screen%20Shot%202023-02-09%20at%202.47.17%20AM.png"></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>WebAPI- 自定義RequestModel 驗證</title>
    <url>/2017/07/03/WebAPI-%E8%87%AA%E5%AE%9A%E7%BE%A9RequestModel-%E9%A9%97%E8%AD%89/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>通常我們在後端接前端Request參數的時候，我們為了省事，會建立一個Model來將前後端Binding</p>
<p>儘管這樣的方式讓我們大幅減少了Action所需要的參數。</p>
<p>不過如果我們想要將每一個欄位都進行驗證的時候，此時光是Action內還沒寫主要程式碼，就先因為格式的驗證佔了一大半的程式碼</p>
<p>因此今天來介紹如何透過自定義Attribute來達到此目的。</p>
<span id="more"></span>
<p>首先一般來說我們在Model當中會定義像這樣的欄位來去接值：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Member</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 必填資訊</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 需超過20歲才可註冊</span></span><br><span class="line">   <span class="keyword">public</span> DateTime Birthday &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 身分證</span></span><br><span class="line">   <span class="keyword">public</span> String IDCard &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>假設今天我們想要定義一些簡單的驗證，例如：</p>
<ul>
<li>最小輸入長度</li>
<li>最大輸入長度</li>
<li>Email驗證<br>那麼你只需要在上方新增一個標籤：<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必填資訊</span></span><br><span class="line">  [<span class="meta">MaxLength(10,ErrorMessage =<span class="string">&quot;超過最大長度&quot;</span>)</span>] <span class="comment">//設定最大只能輸入10個字，超過就回傳錯誤訊息</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure>
當標籤定義完之後，我們就可以在C#的程式讓他進行自動驗證</li>
</ul>
<p>我們只需要這樣寫就可以自動幫我們做完驗證</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(ModelState.IsValid) <span class="comment">//當Model驗證通過時就做的事情</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//Success do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//Failure do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣的方式，讓我們在Action當中不會看到任何的欄位驗證邏輯。</p>
<p>不過這邊又有一個缺點：「官方預先寫好的太少」</p>
<p>因此接下來才是我們要學的重頭戲：</p>
<h3 id="如何自訂義RequestModel-驗證"><a href="#如何自訂義RequestModel-驗證" class="headerlink" title="如何自訂義RequestModel 驗證"></a>如何自訂義RequestModel 驗證</h3><p>首先，我們需要先建立一個類別</p>
<p>根據<a href="https://msdn.microsoft.com/zh-tw/library/cc668224(v=vs.100).aspx">官網文件</a>，我們需要繼承 <code>ValidationAttribute</code></p>
<p>並且去複寫 <code>IsValid</code></p>
<p>此時會產生這樣的Code出來：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">base</span>.IsValid(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著我們就可以在裡面寫邏輯判斷拉！，其中這邊的value，是我們從前端傳進來的參數，因此我們就可以來寫判斷拉！</p>
<p>接下來我們來實做看看如何自定義身分證驗證，以下是程式碼：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            String ID = <span class="keyword">value</span>.ToString().ToUpper();</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; FirstEng = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span> &#125;;</span><br><span class="line">            <span class="built_in">bool</span> chackFirstEnd = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (ID.Trim().Length == <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span> firstNo = Convert.ToByte(ID.Trim().Substring(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (firstNo &gt; <span class="number">2</span> || firstNo &lt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">int</span> x;</span><br><span class="line">                    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; FirstEng.Count; x++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (ID.Substring(<span class="number">0</span>, <span class="number">1</span>) == FirstEng[x])</span><br><span class="line">                        &#123;</span><br><span class="line">                            ID = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span>, x + <span class="number">10</span>, ID.Substring(<span class="number">1</span>, <span class="number">9</span>));</span><br><span class="line">                            chackFirstEnd = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!chackFirstEnd)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"></span><br><span class="line">                    <span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">int</span> ss = <span class="built_in">int</span>.Parse(ID.Substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">while</span> (ID.Length &gt; i)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ss = ss + (<span class="built_in">int</span>.Parse(ID.Substring(i, <span class="number">1</span>)) * (<span class="number">10</span> - i));</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ID = ss.ToString();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">value</span>.ToString().Substring(<span class="number">9</span>, <span class="number">1</span>) == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (ID.Substring(ID.Length - <span class="number">1</span>, <span class="number">1</span>) == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">value</span>.ToString().Substring(<span class="number">9</span>, <span class="number">1</span>) == (<span class="number">10</span> - <span class="built_in">int</span>.Parse(ID.Substring(ID.Length - <span class="number">1</span>, <span class="number">1</span>))).ToString())</span><br><span class="line">                        &#123;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>接著在Action我們就可以這樣做囉！</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(ModelState.IsValid)</span><br><span class="line">          &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.Json(<span class="string">&quot;Success&quot;</span>); <span class="comment">//驗證過後回傳成功</span></span><br><span class="line">           &#125;</span><br><span class="line">          <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">var</span> data = ModelState.Where(x =&gt; x.Value.Errors.Count &gt; <span class="number">0</span>) <span class="comment">//如果驗證失敗，則將錯誤訊息抓出來</span></span><br><span class="line">                            .Select(x =&gt; <span class="keyword">new</span></span><br><span class="line">                            &#123;</span><br><span class="line"></span><br><span class="line">                                x.Key,</span><br><span class="line">                                x.Value.Errors[<span class="number">0</span>].ErrorMessage</span><br><span class="line"></span><br><span class="line">                            &#125;).ToList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="comment">//   List&lt;ModelState&gt; data = ModelState.Values.ToList();</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.Json(data);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>
<p>這邊如果驗證失敗，我們則是採用linQ的方式，將ErrorMessage給取出來，至於細節部分在這邊就不攢述了</p>
<p>各位有興趣可以下中斷點看看回傳的內容，就可以明白為什麼我會這樣寫了。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>WebAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>WinForm - 解決無法對這個檔案顯示設計工具，因為檔案中沒有可以設計的類別</title>
    <url>/2017/12/15/WinForm-%E8%A7%A3%E6%B1%BA%E7%84%A1%E6%B3%95%E5%B0%8D%E9%80%99%E5%80%8B%E6%AA%94%E6%A1%88%E9%A1%AF%E7%A4%BA%E8%A8%AD%E8%A8%88%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%9B%A0%E7%82%BA%E6%AA%94%E6%A1%88%E4%B8%AD%E6%B2%92%E6%9C%89%E5%8F%AF%E4%BB%A5%E8%A8%AD%E8%A8%88%E7%9A%84%E9%A1%9E%E5%88%A5/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>當我們在針對WindowsForm設計的時候，如果我們想要針對原本的Form表單增加一些功能等等，我們會需要透過繼承Form表單來實作。</p>
<p>此時當我們繼承原本的Form頁面時，我們會發現當前繼承的頁面會出現以下錯誤訊息：</p>
<span id="more"></span>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/747b607f-21d2-4185-b73d-9f525f5daf2e/1513316793_69472.png"></p>
<p>這問題是因為 Visual Studio <font>找不到基底類別的設計工具或是基底類別是找不到或無法載入的類別。</font> </p>
<p>因此，只需要將專案進行建置：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/747b607f-21d2-4185-b73d-9f525f5daf2e/1513316869_29036.png"></p>
<p>此時會發現輸出訊息欄會有建置成功的訊息：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/747b607f-21d2-4185-b73d-9f525f5daf2e/1513316900_48037.png"></p>
<p>當建置成功後，再次開啟頁面，就會發現錯誤訊息已經消失了。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>WinForm</tag>
      </tags>
  </entry>
  <entry>
    <title>【CI CD實作】如何自訂Teams Message 介面</title>
    <url>/2023/02/17/%E3%80%90CI-CD%E5%AF%A6%E4%BD%9C%E3%80%91%E5%A6%82%E4%BD%95%E8%87%AA%E8%A8%82Teams-Message-%E4%BB%8B%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信很多人在操作CI&#x2F;CD的時候，都會搭配一些 interaction tool 來將結果推送至自己常用的辦公軟體。<br>其中筆者在辦公中，最常使用的通訊軟體就非 Teams 莫屬。<br>今天就來介紹如果想將自訂的訊息內容透過 notify 推送到 Teams bot的時候，我們可以怎麼美化訊息介面。</p>
<span id="more"></span>

<h2 id="訊息設定"><a href="#訊息設定" class="headerlink" title="訊息設定"></a>訊息設定</h2><p>在過去，我們使用Webhook將內容推送至Teams bot的時候，我們會 POST 以下參數：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;text&quot;:&quot;postman is start!&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>透過這樣的方式，我們可以得到以下內容：<br><img src="/2023/02/17/%E3%80%90CI-CD%E5%AF%A6%E4%BD%9C%E3%80%91%E5%A6%82%E4%BD%95%E8%87%AA%E8%A8%82Teams-Message-%E4%BB%8B%E9%9D%A2/postman.png"></p>
<p>但這樣的方式，僅僅只能將一般的文字，推送至Teams。<br>當然，Teams也支援使用 Markdown 的方式，進行內容美化。</p>
<p>類似以下語法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**[開發環境]** &#123;開發環境&#125;</span><br><span class="line"></span><br><span class="line">**[模組]** &#123;模組名稱&#125;</span><br><span class="line"></span><br><span class="line">**[錯誤訊息]** </span><br><span class="line">&#123;錯誤訊息&#125;</span><br><span class="line"></span><br><span class="line">**[Stack Trace]**</span><br><span class="line">&#123;Stack Trace&#125;</span><br></pre></td></tr></table></figure>
<p>不過如果想做出像 Jenkins類似的面板的話，則是要透過其他的參數來達到這件事：<br><img src="/2023/02/17/%E3%80%90CI-CD%E5%AF%A6%E4%BD%9C%E3%80%91%E5%A6%82%E4%BD%95%E8%87%AA%E8%A8%82Teams-Message-%E4%BB%8B%E9%9D%A2/../%E3%80%90CI-CD%E5%AF%A6%E4%BD%9C%E3%80%91%E5%A6%82%E4%BD%95%E8%87%AA%E8%A8%82Teams-Message-%E4%BB%8B%E9%9D%A2/jenkins.png"></p>
<h2 id="Microsoft-Teams-卡片樣式"><a href="#Microsoft-Teams-卡片樣式" class="headerlink" title="Microsoft Teams 卡片樣式"></a>Microsoft Teams 卡片樣式</h2><p>為了能夠達到像Jenkins發送的面板訊息一樣，我們可以使用 Teams所支援的卡片模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;@type&quot;: &quot;MessageCard&quot;,</span><br><span class="line">    &quot;@context&quot;: &quot;http://schema.org/extensions&quot;,</span><br><span class="line">    &quot;themeColor&quot;: &quot;0076D7&quot;,</span><br><span class="line">    &quot;summary&quot;: &quot;錯誤訊息&quot;,</span><br><span class="line">    &quot;sections&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;activityTitle&quot;: &quot;錯誤訊息&quot;,</span><br><span class="line">            &quot;facts&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;開發環境&quot;,</span><br><span class="line">                    &quot;value&quot;: &quot;&#123;開發環境&#125;&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;模組&quot;,</span><br><span class="line">                    &quot;value&quot;: &quot;&#123;模組名稱&#125;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;activityTitle&quot;: &quot;錯誤內容&quot;,</span><br><span class="line">            &quot;text&quot;: &quot;&#123;錯誤訊息&#125;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;activityTitle&quot;: &quot;Stack Trace&quot;,</span><br><span class="line">            &quot;text&quot;: &quot;&#123;Stack Trace&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這個排版使用了 Microsoft Teams 支援的卡片格式，讓錯誤訊息更加清晰易讀。<br>其中，”themeColor”: “0076D7” 指定了卡片的主題顏色，當然也可以根據自己的喜好更改這個值。</p>
<p>最後，附上筆者將 API 在處理Error Handling時，所推送的訊息內容。<br><img src="/2023/02/17/%E3%80%90CI-CD%E5%AF%A6%E4%BD%9C%E3%80%91%E5%A6%82%E4%BD%95%E8%87%AA%E8%A8%82Teams-Message-%E4%BB%8B%E9%9D%A2/../%E3%80%90CI-CD%E5%AF%A6%E4%BD%9C%E3%80%91%E5%A6%82%E4%BD%95%E8%87%AA%E8%A8%82Teams-Message-%E4%BB%8B%E9%9D%A2/api.png"></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Teams</category>
      </categories>
      <tags>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>【Cordova】 將Angular 部署至 android手機</title>
    <url>/2018/08/21/%E3%80%90Cordova%E3%80%91-%E5%B0%87Angular-%E9%83%A8%E7%BD%B2%E8%87%B3-android%E6%89%8B%E6%A9%9F/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在很久以前，筆者曾經寫過一篇利用<a href="%E3%80%90Cordova%E3%80%91-%E5%B0%87%E9%96%8B%E7%99%BC%E5%A5%BD%E7%9A%84WebApp%E9%83%A8%E7%BD%B2%E8%87%B3-ios.md">jQueryMobile 部署至ios</a>的文章</p>
<p>而在網路上利用將Cordova 將 WebAPP 發行至Android的相關教學文件非常的多，因此難度的門檻其實是相當低的。</p>
<p>但時隔一年，隨著前端的FrameWork不斷推陳出新，大部分的都以採用前端FrameWork進行開發。(如：Angular、React、Vue)</p>
<p>今天我們就來看看，如何利用Cordova搭配前端FrameWork來部署到Android手機吧！(同樣的方式依然可以部署到ios手機上，請參閱之前寫的文章)</p>
<span id="more"></span>

<p>在現在這個前端大亂鬥的時代，很多前端工具都如雨後春筍般冒出。</p>
<p>其中在寫手機應用時，我們第一直覺會想到使用 ionic 這套FrameWork來完成。</p>
<p>而ionic本身也是透過Cordova來進行包裝。</p>
<p>而其中ionic本身與Angular語意相近、寫法雷同，因此也有不少人紛紛投入至此。</p>
<p>但隨著現在Material的樣式不斷高漲，Angular也推出了 Angular Material作為網頁介面。</p>
<p>因此本篇文章將告訴你，如何實現任務的最快途徑。</p>
<h3 id="第一步-一一-環境建置"><a href="#第一步-一一-環境建置" class="headerlink" title="第一步 一一 環境建置"></a>第一步 一一 環境建置</h3><p>首先我們需要安裝Cordova CLI幫我們做環境建置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure>
<p>接著我們會需要以下的工具，因此請各位讀者先行安裝。</p>
<p>需要的工具有以下三樣：</p>
<p>1、<a href="https://nodejs.org/en/download/">NodeJS</a></p>
<p>2、<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html">Java JDK</a></p>
<p>3、<a href="http://developer.android.com/studio/">Android Studio</a></p>
<p> 前面兩項作為Android 手機開發因此是必需要安裝的，後面一項則可以選擇自己是否要安裝。</p>
<p>這裡之所以要安裝 AndroidStudio是因為本身自帶 Gradle，可以將專案自動建置起來。</p>
<p>當然如果不想安裝肥大的 AndroidStudio，可以透過指令方式，直接安裝Gradle也可以。</p>
<p>安裝網址在這： <a href="https://gradle.org/install/">https://gradle.org/install/</a></p>
<p>安裝完成後，可以輸入 <code>gradle -v</code>，查看版本。如果看到此圖就代表安裝成功</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/0ed903e0-c200-4c01-a557-22c6756da5c7/1534818636_36865.png"></p>
<p>接下來我們就可以透過Cordova 來建立我們的專案了。</p>
<p>此時的指令有點多，我們一步步進行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 建立一個名叫MyAPP的專案，在myApp這個資料夾底下。</span><br><span class="line">cordova create myAPP mis.kuas.edu.tw MyAPP</span><br><span class="line"></span><br><span class="line">//進入到此專案資料夾</span><br><span class="line"><span class="built_in">cd</span> myAPP</span><br><span class="line"></span><br><span class="line">//在myAPP的資料夾當中，建立想要部署的平台</span><br><span class="line">cordova platform add android --save</span><br><span class="line"></span><br><span class="line">//將專案進行Build</span><br><span class="line">cordova build android</span><br></pre></td></tr></table></figure>

<h3 id="第二步-ㄧㄧ-使用-Cordova-Plugin-套件"><a href="#第二步-ㄧㄧ-使用-Cordova-Plugin-套件" class="headerlink" title="第二步 ㄧㄧ 使用 Cordova Plugin 套件"></a>第二步 ㄧㄧ 使用 Cordova Plugin 套件</h3><p>若是你的APP有需要啟用其他的硬體元件，如：相機、定位、藍芽…等等</p>
<p>那麼在這個步驟當中，你需要到你Angular的專案，在index.html裡引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">”text/javascript”</span> <span class="attr">src</span>=<span class="string">”cordova.js”</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>請注意，當您嘗試在本地端服務器上進行測試時，由於你沒有cordova.js，因此將會拋出&#x2F;顯示錯誤。</p>
<p>接著使用以下指令添加Cordova Device套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-device</span><br></pre></td></tr></table></figure>
<p>到這裡之後，我們差不多完成了，現在讓我們使用cordova獲取設備。</p>
<p>接著在Angular專案中，實作OnInit函數，並添加套件的call back 函數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> , <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> ‘@angular/core’;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> implements <span class="title class_">OnInit</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> device; <span class="comment">// 由於Typescript不認識 device.platform 因此要先宣告</span></span><br><span class="line"> <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123; </span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;deviceread&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line"> <span class="title function_">alert</span>(device.<span class="property">platform</span>); </span><br><span class="line"> &#125;, <span class="literal">false</span>); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三部-ㄧㄧ-打包你的-Angular專案"><a href="#第三部-ㄧㄧ-打包你的-Angular專案" class="headerlink" title="第三部 ㄧㄧ 打包你的 Angular專案"></a>第三部 ㄧㄧ 打包你的 Angular專案</h3><p>接下來也就是最重要的一步了。</p>
<p>我們透過 ng build –prod 打包完專案後</p>
<p>會在專案中找到dist的資料夾。裡面是我們打包過後的專案</p>
<p>其中點開index.html 我們需要將<base href="/">標記更新為<base href="./">，這樣才能使angular能夠訪問目錄路徑中的文件。</p>
<p>最後將整個dist資料夾內的檔案，複製一份到我們剛剛透過cordova建置的專案目錄中 （myapp&#x2F;www 的資料夾內 ）</p>
<p>最後，輸入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cordova build android</span><br></pre></td></tr></table></figure>
<p>產生APK檔案，即可大功告成！</p>
<p>而產生出來的檔案會存放在：</p>
<p>myapp&#x2F;platforms&#x2F;android&#x2F;app&#x2F;build&#x2F;outputs&#x2F;apk&#x2F;debug 底下。</p>
<p>附上一張完整部署成功的圖：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/0ed903e0-c200-4c01-a557-22c6756da5c7/1534820679_13908.png"></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/0ed903e0-c200-4c01-a557-22c6756da5c7/1534821256_45537.png"></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Cordova</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>【Cordova】 建立 Android release 簽名版本（Signature Version）</title>
    <url>/2018/09/25/%E3%80%90Cordova%E3%80%91-%E5%BB%BA%E7%AB%8B-Android-release-%E7%B0%BD%E5%90%8D%E7%89%88%E6%9C%AC%EF%BC%88Signature-Version%EF%BC%89/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>當我們使用 Cordova 進行 build的時候，Codova會自動幫我們產生 debug版本的apk</p>
<p>但當我們要將APP 進行上架時，僅有debug版的apk是不能進行上架的</p>
<p>因此我們需要將APP轉為可上架版本。</p>
<p>本篇文章將會全面帶你操作，學習如何將APP打包成 Signature Version 的 發布版本(Release)</p>
<span id="more"></span>

<p>當我們直接下匯出指令</p>
<p>cordova build android</p>
<p>預設會自動在app&#x2F;build&#x2F;output 底下 建立 debug資料夾，並將測試版本的apk檔案放入此中</p>
<p>雖然這個版本可以直接在 Android系統上使用，但是若要考慮到上架，會發現Google Play 不允許使用非發布版本的apk進行上架。</p>
<p>因此我們還需要在該指令後面，增加  –release 參數</p>
<p>cordova build android  –release</p>
<p>這時候預設一樣會自動在app&#x2F;build&#x2F;output 底下 建立 release 資料夾，並將發布版本的apk檔案放入此中</p>
<p>當你很開心以為這樣就產生出來，可以進行上架的話，你就錯了</p>
<p>我們將剛剛產生出來的 Release版本放入到模擬器中運行，會發現以下錯誤：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/78e21927-ebe4-4353-b38c-e0e5ee8f8639/1537842546_34736.png"></p>
<p>而這個錯誤訊息會發生的原因，主要是因為我們的發布版本 Release 並沒有經過金鑰簽名，所以這個 release apk 不可用</p>
<p>因此我們在下該行指令之前，需要先產生一份金鑰檔，再利用這份金鑰檔進行簽名</p>
<p>最後才可以產生出可使用的 release apk 版本。</p>
<p>因此我們需要下該行指令，產生金鑰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -genkey -v -keystore MyApp.keystore  -alias myapp</span><br></pre></td></tr></table></figure>

<p>其中 </p>
<p>MyApp.keystore  是你匯出金鑰的檔案名稱</p>
<p>myapp 是簡稱</p>
<p>接下來會要你填寫一些金鑰資訊及密碼</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/78e21927-ebe4-4353-b38c-e0e5ee8f8639/1537844680_51531.png"></p>
<p>完成後會再該目錄底下產生一個 MyApp.keystore  的金鑰檔案</p>
<p>建議該檔案複製一份留存，然後記錄一下帳號密碼。  PS: 可以放在 Document底下做保管</p>
<p>未來若有其他專案需要產生 release apk 就可以重複使用。</p>
<p>接下來為了之後簽名方便，我們在 platform&#x2F;android 資料夾中，新增一個 properties 的檔案</p>
<p>檔案的內容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">storeFile=/Users/leo/Documents/myapp.keystore     // storeFile 檔案路徑，建議可以放在文件資料夾底下做保管</span><br><span class="line">storeType=jks                                     // 金鑰使用的演算法格式</span><br><span class="line">keyAlias=androidkeystore                          // 金鑰別名</span><br><span class="line">keyPassword=                                      // 金鑰密碼</span><br><span class="line">storePassword=                                    // store 密碼</span><br></pre></td></tr></table></figure>

<p>這樣當我們進行 Cordova build的時候，Cordova 就會自動去讀取該檔案，幫我們將 release apk 進行簽名</p>
<p>完成之後，我們就可以再次輸入該指令：</p>
<p>cordova build android –release</p>
<p>這樣產生出來的APP 就是擁有 Signature Version 的 release apk了。</p>
<p>最後請記得一件事！<br><font color="red"><br>若該手機內已經有 debug版本的 apk，請記得先卸載後再安裝 新的 release apk</font></p>
<p>因為不管是 debug版本的apk 還是 release版本的 apk 他們都會共用同一組 APP ID<br><br>所以這時候直接安裝新的，會導致錯誤 （筆者曾經為了這個問題折騰了好久…最後刪掉原本手機內的app 就成功了）</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Cordova</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>【Cordova】 將開發好的WebApp部署至 ios</title>
    <url>/2020/07/27/%E3%80%90Cordova%E3%80%91-%E5%B0%87%E9%96%8B%E7%99%BC%E5%A5%BD%E7%9A%84WebApp%E9%83%A8%E7%BD%B2%E8%87%B3-ios/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>這是筆者在大學期間修的一門手機應用課程。</p>
<p>而在去年在修這一門課的時候，筆者是使用Cordova 將JqueryMobile App 發行至 Android平台上</p>
<p>時隔一年，筆者也從Windows跳槽至Mac OSX了。</p>
<p>而一年後再修相同的課程感覺真的很不一樣，對於許多概念越來越能快速釐清。</p>
<span id="more"></span>
<p>由於在網路上利用將Cordova 將 WebAPP 發行至Android的相關教學文件非常的多，而在過去筆者也曾經成功的將WebApp發行至Android</p>
<p>因此難度的門檻其實是相當低的。</p>
<p>可是換到ios的平台上，可就不是這麼一回事了。其中有許多眉眉角角是需要注意、且只發生在OSX上的。</p>
<p>首先在開始之前我們需要先將我們的工具準備好，畢竟工欲善其事必先利其器嘛</p>
<p>我們會需要以下的工具，因此請各位讀者先行安裝。</p>
<p>需要的工具有以下三樣：</p>
<p>1、<a href="https://nodejs.org/en/download/">NodeJS</a></p>
<p>2、<a href="http://ant.apache.org/bindownload.cgi">Apache Ant</a></p>
<p>3、<a href="https://developer.apple.com/xcode/">Xcode</a></p>
<p>其中1、3項目其實都快速安裝就可以了，不太需要繁雜的步驟。</p>
<p>接下來主要會先跟各位講述關於第2項目的安裝。</p>
<p>當Apache Ant下載下來後，各位會發現他是一個壓縮檔案，但是當解開來後我們會發現到他並沒有任何的執行檔可以供給我們安裝</p>
<p>原因在於他並不是一個需要安裝的軟體，我們需要透過Command Line的方式，讓我們的系統能夠讀懂他</p>
<p>所以此時你的Apache Ant 大致上會長這樣：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497261148_83851.png"></p>
<p>接著我們將壓縮過後的這個Ant資料夾移至Users&#x2F;{YourUserName}底下，方便待會我們比較好做事。</p>
<p>接著我們在開啟Command Line的時候，我們必須先確保自己在UserName底下<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497261527_93629.png"></p>
<p>接著 我們輸入以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure>
<p>此時會進入到一整個空白的頁面，這時候我們按下鍵盤的 i 啟動插入模式</p>
<p>接著輸入以下內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$&#123;PATH&#125;:/Users/Leo/ant/bin</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：這裡的Leo 指的是自己使用者的名稱，所以請讀者自行更換為自己的使用者名稱</p>
</blockquote>
<p>之所以要做這一步主要是需要設定環境變數，讓我們的OSX系統能夠認識Apache Ant這個軟體。</p>
<p>接著我們可以輸入以下的Command Line 來查看是否成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ant -v</span><br></pre></td></tr></table></figure>
<p> 如果出現以下的訊息，就代表成功了。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497261977_01973.png"><br>接著呢，我們除了剛剛三種軟體需要安裝以及設定之外，我們還需要安裝最最重要的主角 Cordova</p>
<p>我們一樣利用 Command Line 輸入以下指令安裝Cordova：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g cordova</span><br></pre></td></tr></table></figure>
<p>安裝完成之後，我們就可以透過Cordova 來建立我們的專案了。</p>
<p>此時的指令有點多，我們一步步進行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 建立一個名叫MyAPP的專案，在myApp這個資料夾底下。</span><br><span class="line">cordova create myAPP mis.kuas.edu.tw MyAPP</span><br><span class="line"></span><br><span class="line">//進入到此專案資料夾</span><br><span class="line"><span class="built_in">cd</span> myAPP</span><br><span class="line"></span><br><span class="line">//在myAPP的資料夾當中，建立想要部署的平台</span><br><span class="line">cordova platform add ios --save</span><br><span class="line"></span><br><span class="line">//將專案進行Build</span><br><span class="line">cordova build ios</span><br></pre></td></tr></table></figure>

<p>此時我們可以到剛剛透過Cordova所產生的資料夾當中，我們會發現多了這些內容：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497263059_34018.png"></p>
<p>接著進入到myApp&#x2F;platforms&#x2F;ios 底下</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497263200_54881.png"></p>
<p>此時會發現Cordova 已經將最基本的XCode專案給建立起來。</p>
<p>接著我們打開我們的XCode，點選左上角的Open 找到 ios 這個資料夾直接按開啟就可以了。 不用特地點選專案</p>
<p>此時會發現長這樣子：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497263332_54288.png"></p>
<p>而我們寫好的程式碼呢，則是需要存放至www底下。</p>
<p>因此我們針對www按右鍵選擇 Show in Finder<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497263404_66147.png"></p>
<p>接著將我們寫好的專案直接原封不動地貼上去就可以了。其中index.html可以直接覆蓋沒關係</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497263497_30806.png"></p>
<p>接著覆蓋好後我們就可以按下XCode上方的執行鈕，就可以開始我們部署了。</p>
<p>部署完成後，我們會看到我們的JQueryMobile已經封裝到iphone上了。</p>
<p>而在這邊基本上就告一個段落了。</p>
<p>但是我們打開我們App時候會發現原本應該顯示地圖的地方改為了這個字樣：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497263904_95934.png"></p>
<p>訊息上告訴我們Request Google Map API time out。</p>
<p>顯然地，我們離成功還有一段距離要走。</p>
<p>接著我們發現到Xcode上多了一段訊息。</p>
<p>訊息上顯示：</p>
<blockquote>
<p>This app has attempted to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSLocationWhenInUseUsageDescription key with a string value explaining to the user how the app uses this data</p>
</blockquote>
<p>因此從錯誤訊息當中我們知道，課堂上老師教我們的GPS 以及GoogleMap,這些都是需要權限的</p>
<p>而筆者這邊已經將該App所需要的權限已經打好了，我們到Resources底下找到MyApp-Info.plist 這邊是存放權限的地方</p>
<p>我們按右鍵選擇 Open As &gt; Source Code</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497264159_70272.png"></p>
<p>接著貼上以下程式碼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;NSLocationUsageDescription&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;App需要您的同意,才能訪問地點&lt;/string&gt;</span><br><span class="line">  &lt;!-- 在使用期間訪問位置 --&gt;</span><br><span class="line">  &lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;App需要您的同意,才能在使用期间訪問地點&lt;/string&gt;</span><br><span class="line">  &lt;!-- 始终訪問位置 --&gt;</span><br><span class="line">  &lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;App需要您的同意,才能始终訪問地點&lt;/string&gt;</span><br></pre></td></tr></table></figure>
<p>如此一來權限的問題就可以解決了。</p>
<p>最後附上完成的畫面：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/239e4358-f6d1-4d88-8da8-c195aaf03978/1497264438_98326.PNG"></p>
<blockquote>
<p>PS: 如果使用模擬器進行定位的話，因為模擬器設定在國外，因此所抓到的距離會不準確，建議在實機上進行測試。</p>
</blockquote>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Cordova</category>
      </categories>
      <tags>
        <tag>WebApp</tag>
      </tags>
  </entry>
  <entry>
    <title>【Design Pattern】獨體模式(Singleton Pattern)介紹</title>
    <url>/2017/06/03/%E3%80%90Design-Pattern%E3%80%91%E7%8D%A8%E9%AB%94%E6%A8%A1%E5%BC%8F-Singleton-Pattern-%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>獨體模式其實大家很常使用到，但或許大家不知道他叫獨體模式。</p>
<p>獨體模式又稱為單例模式，目的是為了讓<br><strong>該物件只能實體化一次，往後每次調用都是相同的物件</strong><br>而在介紹之前，我們先談談這個獨體模式，他可以使用在哪些情況下。</p>
<span id="more"></span>

<h2 id="獨體模式使用場景"><a href="#獨體模式使用場景" class="headerlink" title="獨體模式使用場景"></a>獨體模式使用場景</h2><p>前面剛剛有說過，獨體模式相信有在寫程式的一定都有使用過，只是自己不知道它也是23種設計模式中的其中一種罷了。</p>
<p>他的應用範圍相當廣泛，隨便舉幾個例子：</p>
<p><strong>1.外部資源：</strong><br>在我們撰寫多執行緒的時候，一定都會遇到當資源有限的情況下，只能有一個Client可以取得該資源時，同一時間我們該如何去判斷只有一位Client可以獲取資源。<br>這就是獨體模式。</p>
<p><strong>2. Windows的Task Manager（任務管理器）</strong><br>相信大家都有開啟過Windows的TaskManager吧？其實它就是很典型的獨體模式，我們可以操作看看，你會發現在同一時間內我們無法打開兩個windows task manager</p>
<p>有興趣的可以自己試試看哦~  </p>
<p><strong>3.網站的計數器</strong><br>一般我們在統計該網站的訪問人數時，也是採用獨體模式實現。</p>
<p>假設該站總瀏覽次數為1000次，在同一時間內，有一個以上的Client瀏覽了該網站，如果我們不能及時的將總瀏覽次數進行Lock，那麼同一時間內我們該如何計算瀏覽次數+1呢是吧？</p>
<p>簡單介紹完使用場景後，接下來我們來介紹一下該如何使用獨體模式呢？</p>
<p>在這邊一樣透過幾個程式碼的範例來講解一下獨體模式的使用方式：</p>
<h3 id="1-透過自訂函式來控制該物件的建立"><a href="#1-透過自訂函式來控制該物件的建立" class="headerlink" title="1.透過自訂函式來控制該物件的建立"></a>1.透過自訂函式來控制該物件的建立</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 透過自訂函數來初始化該物件</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()<span class="comment">//禁止外部直接實體化該物件</span></span></span><br><span class="line">       &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (singleton == <span class="literal">null</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> singleton;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>我們可以透過自訂函式來將該物件進行實體化，當物件尚未被實體化時，才執行 new 關鍵字</p>
<p>這是第一種最基本的方式，我們禁止外部可以實體化該物件，並由自訂函式來實現，此種方式能確保在程式的生命週期中，只會有一個實體產生。</p>
<h3 id="2-透過自訂函式來控制該物件的建立（使用sealed與readonly關鍵字限定物件多次建立）"><a href="#2-透過自訂函式來控制該物件的建立（使用sealed與readonly關鍵字限定物件多次建立）" class="headerlink" title="2.透過自訂函式來控制該物件的建立（使用sealed與readonly關鍵字限定物件多次建立）"></a>2.透過自訂函式來控制該物件的建立（使用sealed與readonly關鍵字限定物件多次建立）</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 利用sealed 限定該類別不能被繼承 透過readonly限定初始化時機</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">SealedSingleton</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> SealedSingleton instance = <span class="keyword">new</span> SealedSingleton();</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">SealedSingleton</span>()</span> &#123; &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SealedSingleton <span class="title">GetInstance</span>()</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> instance;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>這個例子與第一種相同，都是透過自訂函式來進行該物件的調用。不過唯一不一樣的是，在這邊我們利用了<code>sealed</code>與<code>readonly</code>關鍵字。</p>
<p>我們都知道，類別一但被繼承的時候，會自動初始化父類別的欄位以及建構元的部分，因此我們加上<code>sealed</code>關鍵字，讓他不允許被繼承</p>
<p>如此一來，我們能確保目前第一步的該物件只會有一個實體存在。</p>
<p>接著在欄位變數的初始化上，我們將在物件前面加上了 <code>readonly</code> ，讓該變數只能在欄位或是建構元當中進行物件的初始化，其餘地方禁止進行初始化。</p>
<p>會做這一步的用途在於，限定我們的物件在這一隻程式底下只會有一個instance產生。</p>
<h3 id="3-在多執行緒上，確保只有一個物件實體存在"><a href="#3-在多執行緒上，確保只有一個物件實體存在" class="headerlink" title="3.在多執行緒上，確保只有一個物件實體存在"></a>3.在多執行緒上，確保只有一個物件實體存在</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 利用lock來確保同一時間只會有一個實體產生</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">SingletonLock</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLock instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> syncRoot = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLock</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLock <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) <span class="comment">//確保當前沒有這個物件存在</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (syncRoot)<span class="comment">//鎖住當前狀態</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>)<span class="comment">//再次確認該物件不存在</span></span><br><span class="line">                &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonLock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>最後一種方式則是在當我們使用  Multi-Thread 時，為了確保只會有一個物件實體存在，我們可以透過lock 這個關鍵字</p>
<p>確保同一時間不會有一個以上的物件實體存在。</p>
<p>使用方法與 java的<code>synchronized</code> 相同，在這邊就不多做說明了。<br>以上就是獨體模式的相關介紹以及各種的使用方式。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>【Modbus】 如何看懂 Modbus TCP 通訊協定</title>
    <url>/2020/07/27/%E3%80%90Modbus%E3%80%91-%E5%A6%82%E4%BD%95%E7%9C%8B%E6%87%82-Modbus-TCP-%E9%80%9A%E8%A8%8A%E5%8D%94%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近筆者接了一個工控系統，其中PLC所使用的是Modbus TCP的通訊協定。</p>
<p>由於這個部分因為從來沒有接觸過，所以花了一點時間研究。</p>
<p>趁著現在記憶猶新，趕緊寫下來，方便日後對照，也讓讀者們能夠快速看懂Modbus TCP協定。</p>
<p>Modbus為工業上常用的通訊協定之一，也是目前工業領域通訊協定常用的標準協定。</p>
<span id="more"></span>
<p>一般來說，Modbus主要可以再細分為兩種協定（Modbus RTU 、Modbus ASCII 、Modbus TCP）</p>
<p>Modbus RTU 是一種為使用二進位表示法來進行資料的傳遞與交換，也是比較多人使用的，因為方便，也不需要轉換為ASCII</p>
<p>Modbus ASCII 則是一種對於人類來說，可讀性較高的協定。</p>
<p>而以上兩種方式在傳遞資料的結尾皆需要加上 CRC （錯誤檢查機制）。</p>
<p>其中 Modbus 也可以藉由乙太網路 TCP&#x2F;IP 的方式來進行傳遞資料，叫做 Modbus TCP</p>
<p>也是我們今天主要要介紹的協定。</p>
<p>此種通訊格式不需要計算CRC，取而代之的是使用識別碼的方式來進行資料驗證。</p>
<p>在學習 Modbus協定之前，我們需要先了解每一個Byte各代表的意思為何</p>
<p>以下為 Modbus TCP request 的封包格式：</p>
<p>TCP Header	 | Address	 | Function Code |	Start register addr	|data<br>———|———-|———|———|———|———<br> 6bytes | 1byte	 | 1byte |2byte|N bytes</p>
<h2 id="TCP-Header"><a href="#TCP-Header" class="headerlink" title="TCP Header"></a>TCP Header</h2><p>其中我們會發現 TCP Header 一共佔了6Byte。</p>
<p>這6個Byte主要是由三個欄位所組成，每一個欄位都佔2Byte。</p>
<p>本次通訊的識別碼（Transaction ID）：會產生2個Byte的隨機值，用來識別該次通訊。</p>
<p>通訊方式（Protocal ID）：基本上都是0，用來表示採用哪種通訊協定。0表示為 Modbus &#x2F; TCP</p>
<p>資料長度（Length）：用來定義從Address開始 ~ data欄位結束，所佔的總長度為何。</p>
<h2 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h2><p>共佔1Byte，用來記錄該次通訊要存取 slave端位址</p>
<h2 id="Function-Code"><a href="#Function-Code" class="headerlink" title="Function Code"></a>Function Code</h2><p>共佔1Byte，用來定義該次通訊是要做哪種操作。</p>
<p>其中常見的Function Code有以下幾種：</p>
<p>01: 讀取當前 digital out status</p>
<p>02: 讀取當前 digital input status</p>
<p>03: 讀取當前 analog out status</p>
<p>04: 讀取當前 analog input status</p>
<p>05: 寫入單個  digital out value</p>
<p>06: 寫入單個  analog out value</p>
<p>15: 寫入多個  digital out value</p>
<p>16: 寫入多個  analog out value</p>
<h2 id="Start-register-addr"><a href="#Start-register-addr" class="headerlink" title="Start register addr"></a>Start register addr</h2><p>共佔2Byte，用來定義暫存器起始位址</p>
<h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>長度為非固定，由傳送的資料長度而定。</p>
<p>以上為每一個欄位的解說，接下來筆者擷取了一張從WireShark所側錄到的 Modbus封包來做解說。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/a223910e-7214-438a-9a9c-2642d39b61dd/1545820526_16343.png"></p>
<p>上圖為， 由WireShark所側錄到的Modbus封包，用來開啟LED指示燈的控制代碼。</p>
<p>從ac開始到 01結束是整個Modbus的封包內容。</p>
<p>封包內容如下：<code>ac 70 00 00 00 06 58 06 00 c8 00 01</code></p>
<p>其中我們剛剛有說到，Modbus的Header 共佔 6Byte，也就是：</p>
<p>本次通訊的識別碼（Transaction ID）：<code>ac 70</code></p>
<p>通訊方式（Protocal ID）：<code>00 00</code></p>
<p>資料長度（Length）：<code>00 06</code> 其中 06代表接下來一共有 6Byte的封包內容</p>
<p>上述的三個欄位均為Modbus的Header，每一個都佔2Byte，共佔6Byte。</p>
<p>slave端位址（Address）：<code>58</code></p>
<p>操作碼（Function Code）：<code>06</code> 代表寫入單一數值</p>
<p>暫存器起始位址（Start register addr）：<code>00 c8 </code></p>
<p>傳送資料（Data）： <code>00 01</code></p>
<p>最後，附上一張Modbus控制的表格來做個結束。</p>
<p>操作碼 06: 寫入LED開燈資訊</p>
<table>
<thead>
<tr>
<th>Transaction ID</th>
<th>Protocal ID</th>
<th>Length</th>
<th>Address</th>
<th>Function Code</th>
<th>Start register addr</th>
<th>Data</th>
</tr>
</thead>
<tbody><tr>
<td>ac 70</td>
<td>00 00</td>
<td>00 06</td>
<td>58</td>
<td>06</td>
<td>00 c8</td>
<td>00 01</td>
</tr>
</tbody></table>
<p>意思為：Master要求寫入資料到裝置位址58的暫存器位址 <code>00c8</code>，寫入的資訊為 <code>00 01</code>。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Modbus</category>
      </categories>
      <tags>
        <tag>Modbus</tag>
      </tags>
  </entry>
  <entry>
    <title>【CI CD實作】允許Jenkins有sudo權限(三)</title>
    <url>/2023/02/10/%E5%85%81%E8%A8%B1Jenkins%E6%9C%89sudo%E6%AC%8A%E9%99%90/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由於我們要利用Jenkins來實作CI&#x2F;CD，因此部署上的操作上往往免不了會需要sudo的權限讓我們能做一些事情，如：建立資料夾、刪除資料夾、搬遷檔案等各種操作。</p>
<p>因此本篇主要介紹如何允許Jenkins有sudo權限</p>
<p>下面來描述在CentOS7上配置的具體步驟。</p>
<span id="more"></span>

<h3 id="配置步驟"><a href="#配置步驟" class="headerlink" title="配置步驟"></a>配置步驟</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">讓root 有權限可以編輯sudoers權限</span><br><span class="line">chmod 600 /etc/sudoers </span><br><span class="line">運行 vim /etc/sudoers 來修改該文件，允許root組下的用戶不需要密碼運行任何命令：</span><br><span class="line">## Same thing without a password</span><br><span class="line">%root        ALL=(ALL)       NOPASSWD: ALL</span><br><span class="line">在Defaults requiretty 後面添加一行Defaults:jenkins !requiretty</span><br></pre></td></tr></table></figure>

<p>接著將jenkins帳號加入到root的Group中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -a -G root jenkins</span><br></pre></td></tr></table></figure>

<p>重啟Jenkins</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure>

<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>【CI CD實作】在 .NET 透過nuget.config 自訂NuGet 套件來源（番外篇）</title>
    <url>/2023/02/11/%E5%9C%A8-NET-%E9%80%8F%E9%81%8Enuget-config-%E8%87%AA%E8%A8%82NuGet-%E5%A5%97%E4%BB%B6%E4%BE%86%E6%BA%90/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>通常我們在開發.NET專案時，若因為專案中有使用到公司內部的Library時，通常都會架設Private Nuget Server來進行套件添加。<br>而一般來說添加套件來源的方式大多都是在 Nuget管理員的介面中選擇添加的目錄夾或是Url來操作。<br>但這樣的方式如果實現CI&#x2F;CD時，則會遇到找不到套件來源的問題，原因是Jenkins是直接將Github上的專案Clone下來進行建置與部署。<br>但我們設定套件來源的時機則是在專案Clone後手動開啟Nuget管理員添加的。<br>因此本篇主要會教學如何透過幾種方式讓Jenkins能夠讀的到自訂的Nuget套件來源。</p>
<span id="more"></span>
<h3 id="建立Nuget-config"><a href="#建立Nuget-config" class="headerlink" title="建立Nuget.config"></a>建立Nuget.config</h3><p>我們可以在方案的根目錄下輸入以下指令進行Nuget範本建立(或直接新增檔案輸入也可以)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet new nugetconfig</span><br></pre></td></tr></table></figure>

<p>這時候會在當前目錄下建立一個 nuget.config 其內容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packageSources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果想要取消繼承在 %AppData%\NuGet\nuget.config的設定，可以加上 &lt;clear/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">clear</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;nuget&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://api.nuget.org/v3/index.json&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">packageSources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因此我們可以透過 add的方式，手動將私有的套件來源加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;add key=&quot;來源名稱&quot; value=&quot;來源網址&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>完成後關閉專案再重新啟動，就會發現Nuget的套件來源已經自動補上在config設定的自訂來源了。<br><img src="/2023/02/11/%E5%9C%A8-NET-%E9%80%8F%E9%81%8Enuget-config-%E8%87%AA%E8%A8%82NuGet-%E5%A5%97%E4%BB%B6%E4%BE%86%E6%BA%90/nuget.png"></p>
<h3 id="在機器上手動添加全域套件來源"><a href="#在機器上手動添加全域套件來源" class="headerlink" title="在機器上手動添加全域套件來源"></a>在機器上手動添加全域套件來源</h3><p>剛剛有提到.NET其實預設在 <code>%AppData%\NuGet\nuget.config</code> 有全域的設定檔<br>這也就是為什麼 Jenkins可以直接執行那些Nuget的套件，但是自訂來源的套件卻無法執行的原因。</p>
<p>因此我們也可以在部署的機器上手動添加自訂來源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet nuget add source &lt;來源網址&gt; -n &lt;自訂名稱&gt;</span><br></pre></td></tr></table></figure>

<p><font color="red">但這個方式不太建議，除了每一台機器都要手動添加以外，也需要同步管理每一個的Nuget package list，因此如果都用config的話，就可以一目瞭然了。<br></font></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>如何透過Postman傳遞Array參數</title>
    <url>/2017/12/24/%E5%A6%82%E4%BD%95%E9%80%8F%E9%81%8EPostman%E5%82%B3%E9%81%9EArray%E5%8F%83%E6%95%B8/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Postman一直以來都是廣為人知開發輔助工具</p>
<p>很多時候當我們已經開發完API的時候，想測試自己寫的程式是否沒問題</p>
<p>但是卻因為前端的介面還沒有完成，而導致無法進行測試。</p>
<p>這時候一般大部分的工程師會採用Postman的工具來進行測試</p>
<p>今天來介紹一下，如何在Postman當中，傳遞Array</p>
<span id="more"></span>

<p>在最新的版本當中，Postman傳遞Array的方法，已經改為利用[]的方式進行傳遞</p>
<p>方法其實很簡單：</p>
<p>假設我有一個data陣列想要進行傳送</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/a5fd7cee-1c87-44bd-a4c6-3e2eda43f573/1514081767_28554.png"></p>
<p>只需要進行這樣的撰寫方式，Postman就會自動幫你把這幾個參數視為是陣列，在PHP當中，只需要這樣就可以接的到值了。<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/a5fd7cee-1c87-44bd-a4c6-3e2eda43f573/1514081858_37187.png"></p>
<p>另外，假設我們是WebApi的話，方法也是一樣的：</p>
<p>首先在我們的Request Model當中，定義一個Array的欄位</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/a5fd7cee-1c87-44bd-a4c6-3e2eda43f573/1514081936_38664.png"></p>
<p>接著一樣在我們的Postman當中，給定我們的值，只要欄位名稱相同，後面用[]來接，就可以當成陣列傳送到後端API</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/a5fd7cee-1c87-44bd-a4c6-3e2eda43f573/1514082470_9356.png"></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Postman</category>
      </categories>
  </entry>
  <entry>
    <title>【CI CD實作】安裝Jenkins(一)</title>
    <url>/2023/02/09/%E5%AE%89%E8%A3%9DJenkins(%E4%B8%80)/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直以來耳聞Jenkins的大名，知道可以用它來做CI&#x2F;CD以及跑專案排程等等，能做到的事情非常的多。</p>
<p>但由於筆者先前的公司過去一直都是使用GitLab作為 Repository Server，而GitLab本身的CI Server - <strong>GitLab Runner</strong> 又很有名，因此一直沒機會可以好好探究，直到現在換了新公司，改採用Gitgub後終於有機會好好一探究竟。</p>
<p>本篇環境主要是在Ubuntu環境上建置的，因此以下操作指令都是以Ubuntu為主。</p>
<span id="more"></span>

<h3 id="JAVA-安裝"><a href="#JAVA-安裝" class="headerlink" title="JAVA 安裝"></a>JAVA 安裝</h3><p>首先一如往常需要先更新套件。<br>由於jenkins是用java編寫的, 所以必須先安裝java執行環境，確認完成後，再下載Jenkins進行安裝。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install default-jre</span><br><span class="line">sudo apt-get install default-jdk</span><br></pre></td></tr></table></figure>

<h3 id="Jenkins下載與安裝"><a href="#Jenkins下載與安裝" class="headerlink" title="Jenkins下載與安裝"></a>Jenkins下載與安裝</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下載Jenkins並將Jenkins加入到套件清單中</span><br><span class="line"></span><br><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br><span class="line">sudo sh -c &#x27;echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#x27;</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">安裝jenkins</span><br><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure>

<p>當安裝一切就緒後，Jenkins會自動監聽8080port，因此可以透過該網址前往設定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure>
<div style="color:red;font-weight:900;margin-bottom:10px;">
註：Jenkins預設為開機自動啟動，已經有寫好服務腳本了，可以透過 systemctl status jenkins查看
</div>

<p>當連線後，我們需要先解鎖Jenkins，到圖中指定的目錄下找到密碼後，貼上來：<br><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*9Y_JwWoGh2ZXzJ94zLpPLw.png"></p>
<div style="color:red;font-weight:900;margin-bottom:10px;">
註：Jenkins預設安裝路徑為 /var/lib/jenkins
下一篇會教如何更改預設路徑
</div>

<p>解鎖後，會詢問我們選擇套件安裝，直接選擇左邊按鈕，讓他按照推薦套件安裝即可。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*jcluDo-52PTdpydzApvUzQ.png"></p>
<p>其中套件有包含 Git Plugin，因此我們不再需要手動安裝相關套件就可以開始實現CI&#x2F;CD</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*dBGZe7LSGZAVhgol-kQRVA.png"></p>
<p>安裝完成後，接下來會要求要輸入帳號&#x2F;密碼，這組帳號密碼未來將為作為我們切換jenkins身份，下指令要操作其他行為的時候將會用到，並且登入平台的時候預設也是採用該身份進行登入。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*X32QycUdoUS74x6E5pKytg.png"></p>
<p>全部完成後，我們就可以看到登入的畫面了。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*SqqCK5W-cS-pcWrW0EkqSw.png"></p>
<p>下一篇將會先介紹該如何變更Jenkins的位置，避免當硬碟空間不足的時候，Jenkins會有故障的情況發生。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Ubuntu安裝多個.NET版本環境</title>
    <url>/2023/02/11/%E5%A6%82%E4%BD%95%E5%9C%A8Ubuntu%E5%AE%89%E8%A3%9D%E5%A4%9A%E5%80%8B-NET%E7%89%88%E6%9C%AC%E7%92%B0%E5%A2%83/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近筆者在架設<code>BaGet</code>這套 private Nuget Server時，發現由於Baget是採用 .NET Core3.1的環境進行建置的，而在2023年的今天，.NETCore3.1早已被微軟淘汰不再支援了，因此無法從官網上直接安裝想要的版本。</p>
<p>因此本篇教學主要介紹如何在Ubuntu上安裝多個.NET版本環境。</p>
<span id="more"></span>

<h3 id="環境安裝"><a href="#環境安裝" class="headerlink" title="環境安裝"></a>環境安裝</h3><p>由於.NETCore 3.1 已經不被微軟所維護了，因此我們無法直接透過 <code>apt-get install</code> 進行安裝。</p>
<p>因此我們需要手動下載並加入到環境變數以利未來我們可以在任何地方直接呼叫：</p>
<h4 id="下載-NETCore-3-1-SDK"><a href="#下載-NETCore-3-1-SDK" class="headerlink" title="下載.NETCore 3.1 SDK"></a>下載.NETCore 3.1 SDK</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /home/download &amp;&amp;  cd /home/download</span><br><span class="line"></span><br><span class="line">sudo wget --no-check-certificate -O dotnet-3.1.tar.gz https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-3.1.426-linux-x64-binaries</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="建立dotnet根目錄-amp-解壓sdk"><a href="#建立dotnet根目錄-amp-解壓sdk" class="headerlink" title="建立dotnet根目錄&amp;解壓sdk"></a>建立dotnet根目錄&amp;解壓sdk</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/dotnet</span><br><span class="line"></span><br><span class="line">#解壓縮.NET Core 3.1到指定目錄</span><br><span class="line">sudo mkdir /usr/dotnet/dotnet-3.1</span><br><span class="line">sudo tar zvxf dotnet-3.1.tar.gz -C /usr/dotnet/dotnet-3.1</span><br></pre></td></tr></table></figure>

<h4 id="執行-NET前需要先安裝依賴套件"><a href="#執行-NET前需要先安裝依賴套件" class="headerlink" title="執行.NET前需要先安裝依賴套件"></a>執行.NET前需要先安裝依賴套件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y libunwind8 apt-transport-https</span><br></pre></td></tr></table></figure>

<h3 id="建立-NETCore環境變數"><a href="#建立-NETCore環境變數" class="headerlink" title="建立.NETCore環境變數"></a>建立.NETCore環境變數</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/dotnet/dotnet-3.1/dotnet /usr/bin/dotnet3.1</span><br></pre></td></tr></table></figure>

<h3 id="驗證版本"><a href="#驗證版本" class="headerlink" title="驗證版本"></a>驗證版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet3.1 --info</span><br></pre></td></tr></table></figure>

<p>如果能看到歡迎的訊息就代表成功完成了。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>快速架設私有的Nuget Server</title>
    <url>/2023/02/11/%E5%BF%AB%E9%80%9F%E6%9E%B6%E8%A8%AD%E7%A7%81%E6%9C%89%E7%9A%84Nuget-Server/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大部分在開發的時候，都是直接在Nuget上搜尋開發者release的套件安裝來用，但通常公司的不同專案上總會有相似的專案會需要使用相同的功能。<br>但這些套件又牽涉公司機密，也不方便直接上傳到Nuget公開平台上，因此本篇主要介紹 <code>BaGet</code> 這個方便又強大的 Private Nuget Server，讓我們可以輕鬆管理這些私密的Library。</p>
<span id="more"></span>

<h3 id="BaGet安裝"><a href="#BaGet安裝" class="headerlink" title="BaGet安裝"></a>BaGet安裝</h3><p>Baget這個專案，非常方便簡單，但是有一個缺點——採用 .NET Core 3.1建置<br>而在2023年的今天，要去哪邊生 .NET3.1的環境呢？<br>如果沒有的讀者，可以參考<a href="../%E5%A6%82%E4%BD%95%E5%9C%A8Ubuntu%E5%AE%89%E8%A3%9D%E5%A4%9A%E5%80%8B-NET%E7%89%88%E6%9C%AC%E7%92%B0%E5%A2%83/%E5%A6%82%E4%BD%95%E5%9C%A8Ubuntu%E5%AE%89%E8%A3%9D%E5%A4%9A%E5%80%8B-NET%E7%89%88%E6%9C%AC%E7%92%B0%E5%A2%83.md">此篇</a> 教學，來安裝 .NET 3.1 環境。</p>
<p>當我們擁有 .NET 3.1環境之後，我們只需要下載 Baget Relese 的版本即可：<br><a href="https://github.com/loic-sharma/BaGet/releases">BaGet Release</a></p>
<p>下載完成後，我們就可以透過以下指令將專案進行建置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">筆者本身是額外安裝3.1環境，因此在我的環境下指令為 dotnet3.1</span><br><span class="line">dotnet3.1 BaGet.dll </span><br></pre></td></tr></table></figure>

<p>建置完成後，我們就可以看到一個與Nuget官網一模ㄧ樣的網站了：<br><img src="/2023/02/11/%E5%BF%AB%E9%80%9F%E6%9E%B6%E8%A8%AD%E7%A7%81%E6%9C%89%E7%9A%84Nuget-Server/nuget.png"></p>
<p>切換到Upload頁面我們就可以查看上傳語法，以及得到套件的來源網址<br><img src="/2023/02/11/%E5%BF%AB%E9%80%9F%E6%9E%B6%E8%A8%AD%E7%A7%81%E6%9C%89%E7%9A%84Nuget-Server/upload.png"></p>
<p>最後我們只需要將來源網址添加到 Nuget管理員，這樣就可以找到部署在 Baget上的Library囉！</p>
<p><img src="/2023/02/11/%E5%BF%AB%E9%80%9F%E6%9E%B6%E8%A8%AD%E7%A7%81%E6%9C%89%E7%9A%84Nuget-Server/nuget%EF%BC%ADanager.png"></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>從 CSS 到 SASS (SCSS) 超入門觀念引導</title>
    <url>/2018/06/25/%E5%BE%9E-CSS-%E5%88%B0-SASS-SCSS-%E8%B6%85%E5%85%A5%E9%96%80%E8%A7%80%E5%BF%B5%E5%BC%95%E5%B0%8E/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>昨天晚上看完了 Alex大的 「CSS到SASS入門引導」直播</p>
<p>看完之後其實學到不少東西，趁著自己記憶猶新趕快將Alex在 Youtube留存的影片再拿來複習一下</p>
<p>順便紀錄在部落格當中，下次就可以更快速學習。</p>
<span id="more"></span>

<h3 id="什麼是-SASS"><a href="#什麼是-SASS" class="headerlink" title="什麼是 SASS ?"></a>什麼是 SASS ?</h3><p>不管是 <strong>SASS</strong>、<strong>SCSS</strong>、<strong>Stylus</strong> 等</p>
<p>相信大家一定都有聽過，但到底是什麼東西？為什麼大家都說好用、方便？</p>
<p>其實這部分需要從最一開始CSS設計開始說起。</p>
<p>相信大家一定都有類似這樣的經驗：</p>
<p>好不容易辛辛苦苦完成一個官方網站，業主看完之後回了一句：「我覺得這些按鈕的顏色都太淺了，我希望再深一點;另外背景色太暗了，我想要亮一點。」</p>
<p>好，拿了錢總要做事嘛，花了好多時間把所有按鈕顏色加深、背景加亮。</p>
<p>業主看完之後依然回了一句：「原來加深之後這麼難看喔？那你再幫我改回來好了，最好可以再深一點點就好。」</p>
<p><del>相信看到這裡的你，拳頭大概已經硬了。</del><br>這樣改了又改，改了又改，錢也沒變多。</p>
<p>所以這時候就會開始納喊許願：</p>
<p>有沒有可能把程式的概念引入到 CSS 裡面去呢？例如說變數？這樣我們就能夠用變數來取代寫死的顏色，要改的話也很方便，只要改一個地方就好？</p>
<p>這不就是 CSS preprocessor 嗎？<br>沒錯，CSS preprocessor 就這樣誕生了。</p>
<p>CSS preprocessor，中文就叫做 CSS 「預處理器」，簡單來說就是你可以先用程式寫一些樣式設定的語法，經過這個預處理器之後，就會變成符合標準的 CSS。</p>
<p>有了CSS preprocessor之後，就可以把變數也應用到 CSS 上面，當然程式語法裡面的 IF、迴圈甚至是函式都應有盡有，讓你從設計師開始踏入這條程式的不歸路。</p>
<p>而 CSS preprocessor 主要提供了以下幾個功能：</p>
<p><strong>變數 ( Variable )、繼承 ( Extend )、函式 ( Function )、混用 ( Mixin )</strong><br>那我們就一個一個來介紹怎麼使用吧！</p>
<h3 id="變數-Variable"><a href="#變數-Variable" class="headerlink" title="變數 ( Variable )"></a>變數 ( Variable )</h3><p>有了前面慘痛的經驗後，我們體會到，每一次需求一來，改了又改，改了又改，改到最後甚至還忘記哪些地方漏改了，所以我們可以透過 變數，來幫我們做集中的管理</p>
<p>只需要改一次，就可以做到全站統一的效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$font_style:Microsoft JhengHei;</span><br><span class="line">$body_color: <span class="number">#E1E1E1</span></span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line"> <span class="attribute">font-family</span>: $font_style;</span><br><span class="line"> <span class="attribute">color</span>: $body_color; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就像上方的範例程式碼一樣，我們可以透過變數的方式，來控管字體樣式、背景顏色等等。</p>
<p>今天就算要更換樣式，我也只需要更改上方變數的值，就可以達到全站統一，這就是——變數。</p>
<h3 id="繼承-Extend"><a href="#繼承-Extend" class="headerlink" title="繼承 ( Extend )"></a>繼承 ( Extend )</h3><p>有了變數之後，我們可以很快速的將每一個我們所需要的樣式，都套用同一個變數來去設定樣式。</p>
<p>可是這樣還有一個問題：「每一次我樣式都還要重複打」</p>
<p>在Alex大的影片當中有提到：通常我們想要將 <a> 變成按鈕的時候，我們都會固定打上以下的程式碼：</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block; <span class="comment">/*將 a 變成區塊*/</span> </span><br><span class="line">  <span class="attribute">text-decoration</span>:none; <span class="comment">/*清除超連結底下的那條底線*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那變成是我們每一次在製作按鈕的時候，都需要先打上這兩行程式碼，之後再根據不同種類的按鈕給予不同的寬度、行高等。</p>
<p>那有沒有什麼方式是可以讓我把固定要寫的樣式集中在一起，未來有需要我只要呼叫就可以？ </p>
<p>那就是——<strong>繼承</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">%aButton &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line"> <span class="keyword">@extend</span> %aButton;</span><br><span class="line"> <span class="comment">/*透過上面的extend 我就可以直接使用已經寫好的樣式，接下來下方就可以自定義我其他按鈕樣式*/</span></span><br><span class="line"> <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>所以看到了這裡，我們已經善用了變數以及繼承，讓我們的SCSS可以做好一個集中式的控管，產生出來的CSS也是乾淨利落，一舉兩得。</p>
<p>不過接下來還有一個問題還沒解決。</p>
<p>我們很常會去定義每一種不同的類別的字，他的字型大小。</p>
<p>舉例來說：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/57a1455a-b61d-4f86-acb4-850d7d53296a/1529916043_64447.png"></p>
<p>上圖是我這一次參加六角學院舉辦的精神時光屋，所提供的一份設計稿。</p>
<p>其中裡面定義了Title、Title2、Title3、Subtitle、paragraph、Logo 的字型大小。</p>
<p>如果每一次都要去定義不同類別的字，會有不同的大小，好像也有點累。</p>
<p>要知道，人類是懶惰的，科技始終來自人的惰性。</p>
<p>所以這時候我們的函式就可以派上用場拉！</p>
<h3 id="函式-Function"><a href="#函式-Function" class="headerlink" title="函式 ( Function )"></a>函式 ( Function )</h3><p>我們可以透過函式，來去定義每一個類別的字，他要產生的大小為何。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*這裡我們用六角學院提供的設計稿來做範例，我們發現他正好是12的倍數*/</span></span><br><span class="line"></span><br><span class="line">$baseSize: <span class="number">12px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*寫一個函數去定義每一種類別的字，它的大小 */</span></span><br><span class="line"><span class="keyword">@function</span> font($<span class="attribute">level</span>: <span class="number">1</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">@return</span> $baseSize *$level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*套用函數 font()*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Title</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>:<span class="built_in">font</span>(<span class="number">6</span>);</span><br><span class="line"> <span class="attribute">font-family</span>: Roboto-Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Title2</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>:<span class="built_in">font</span>(<span class="number">4</span>);</span><br><span class="line"> <span class="attribute">font-family</span>: Roboto-Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Title3</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>:<span class="built_in">font</span>(<span class="number">2</span>);</span><br><span class="line"> <span class="attribute">font-family</span>: Roboto-Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Subtitle</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>:<span class="built_in">font</span>(<span class="number">2</span>);</span><br><span class="line"> <span class="attribute">font-family</span>: Roboto-Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Paragraph</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>:<span class="built_in">font</span>(<span class="number">1.3</span>);</span><br><span class="line"> <span class="attribute">font-family</span>: Roboto-Black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣今天我如果我希望整個 baseSize調整成10的倍數，那麼也只要改最上面的$baseSize，就可以達到全站統一的效果。</p>
<p>是不是很簡單很開心？</p>
<p>好的~終於到最後一個重點了。</p>
<p>剛剛前面我們有講到：對於相同的、重複的樣式，我們可以透過 <strong>繼承(Extend)</strong> 來幫我們完成。</p>
<p>透過SASS，我們可以將共同的樣式寫在一起，之後使用<code>@extend</code> 就可以直接載入樣式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">%aButton &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.successBtn</span> &#123;</span><br><span class="line"> <span class="keyword">@extend</span> %aButton;</span><br><span class="line"> <span class="comment">/*透過上面的extend 我就可以直接使用已經寫好的樣式，接下來下方就可以自定義我其他按鈕樣式*/</span></span><br><span class="line"> <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.errorBtn</span> &#123;</span><br><span class="line"> <span class="keyword">@extend</span> %aButton;</span><br><span class="line"> <span class="comment">/*透過上面的extend 我就可以直接使用已經寫好的樣式，接下來下方就可以自定義我其他按鈕樣式*/</span></span><br><span class="line"> <span class="attribute">width</span>:<span class="number">80%</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*產生出來的 CSS */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.successBtn</span>,<span class="selector-class">.errorBtn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.successBtn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.errorBtn</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">80%</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是遇到有字級的這種該怎麼辦？</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/57a1455a-b61d-4f86-acb4-850d7d53296a/1529918180_82879.png"></p>
<p>不同種類的文字，有自己對應的字級大小，也不是像 剛剛 function一樣是走一個倍數成長的概念。</p>
<p>那我要如何針對不同的字級，正確給予不同的大小呢？</p>
<p>那就是使用—— 混用 ( Mixin )。</p>
<h3 id="混用-Mixin"><a href="#混用-Mixin" class="headerlink" title="混用 ( Mixin )"></a>混用 ( Mixin )</h3><p>正如剛剛前面所說，針對每一種不同的文字種類，我希望大小要能不一樣（如：Title:36px, Subtitle:28px,content:16px）</p>
<p>但是使用 extend 我們會發現到：「extend會將共同擁有的樣式集中管理」。也就是一個樣式，只會產生出一份 Code</p>
<p>那 Mixin呢？</p>
<p>他會這樣子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> aButton() &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.successBtn</span> &#123;</span><br><span class="line"> <span class="keyword">@include</span> aButton();</span><br><span class="line"> <span class="comment">/*透過上面的include 我就可以直接使用上方寫好的mixin樣式，產出屬於他自己的Code*/</span></span><br><span class="line"> <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.errorBtn</span> &#123;</span><br><span class="line"> <span class="keyword">@include</span> aButton();</span><br><span class="line"> <span class="comment">/*透過上面的include 我就可以直接使用上方寫好的mixin樣式，產出屬於他自己的Code*/</span></span><br><span class="line"> <span class="attribute">width</span>:<span class="number">80%</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*產生出來的 CSS */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.successBtn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.errorBtn</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>:block;</span><br><span class="line"> <span class="attribute">text-decoration</span>:none;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">80%</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>沒錯，它不像extend一樣，會將共同的樣式集中在一起，而是產生出兩份一模一樣的程式碼。</p>
<p>而這一點，正好就可以應用在我們的字級上。</p>
<p>雖然說相對的產生出來的樣式會很大一包，因為每include一次，就會產生一組樣式。</p>
<p>但相對的，就能夠擁有客製化的效果。</p>
<p>我們來看看 Alex大 提供的字級樣式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$baseSize:<span class="number">14px</span>;</span><br><span class="line">$sizeLevel:<span class="number">2px</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@function</span> font($<span class="attribute">level</span>: <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">@if</span> $level &lt; <span class="number">0</span> &#123;</span><br><span class="line">    $level:<span class="number">0</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@return</span> $baseSize + $sizeLevel * round($level);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@function</span> rhythm($size) &#123;</span><br><span class="line">  <span class="keyword">@return</span> ceil($size * $paddingLevel / $baseLineSize) * $baseLineSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> font($<span class="attribute">level</span>: <span class="number">1</span>, $<span class="attribute">line-height</span>: auto) &#123;</span><br><span class="line">  $size: <span class="built_in">font</span>($level);</span><br><span class="line">  $line: <span class="built_in">rhythm</span>($size);</span><br><span class="line"></span><br><span class="line">  <span class="attribute">font-size</span>: $size;</span><br><span class="line">  <span class="keyword">@if</span> $line-height == auto <span class="keyword">or</span> $line-height &lt; $line &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: $line;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: $line-height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aaa</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> font(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bbb</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> font(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ccc</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> font(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 產生出來的 CSS */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aaa</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bbb</span> &#123;</span><br><span class="line">   <span class="attribute">font-size</span>:<span class="number">28px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ccc</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>透過 Mixin 我們就可以將不同類別的字級，給予不同的字體大小，就是這麼簡單。</p>
<p>注意： Mixin 是 跟 extend 做比較，一個是產生多個樣式；一個是將樣式全部集中管理。 請不要將 Minxin與 Function搞混做比較。</p>
<p>看完上面介紹的這幾種SCSS功能，有沒有更加了解呢？希望今天的筆記能帶給你&#x2F;妳不一樣的 CSS 體驗。</p>
<p>當然，筆者只將 SCSS 的重點功能做一個簡單的介紹，方便當字典快速查閱。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>SASS</category>
      </categories>
      <tags>
        <tag>CSS SASS</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET Core自動建立Entity</title>
    <url>/2023/01/24/%E8%87%AA%E5%8B%95%E5%BB%BA%E7%AB%8BEntity/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 ASP.Net FrameWork 中，我們可以透過 CodeFirst 的方式，自動幫我們建立資料庫中每一個Table，並轉換成Entity，讓我們有Model可以做對應。</p>
<p>但是在 .Net Core 中，可就沒有辦法那麼方便點一點就可以完成了。我們得需要額外安裝其他套件，並透過下指令的方式才能自動幫我們產生。</p>
<span id="more"></span>


<p>在過去 .Net FrameWork中，我們可以透過 加入&gt;新增項目&gt;資料 中，找到 ADO.NET 實體資料模型</p>
<p>透過裡面的CodeFirst可以幫助我們快速將Table內的欄位轉換成Entity的Model作為使用，非常方便。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/fd6263e3-7315-43ba-b592-a3076b15027a/1597291465.png" alt="實體資料模型精靈"></p>
<p>但在 .Net Core 中，並沒有提供介面可以讓我們進行點選。</p>
<p>因此我們必須要透過安裝套件，並輸入指令才能將資料庫中的Table產生對應的Enriry作為Model讓我們使用。</p>
<p>而在輸入指令之前，我們需要先至Nuget中，安裝以下兩個套件。</p>
<p>分別是：</p>
<p><strong>「Microsoft.EntityFrameworkCore.SqlServer」、「Microsoft.EntityFrameworkCore.Tools」</strong></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/fd6263e3-7315-43ba-b592-a3076b15027a/1597291842.png"></p>
<p>注意：安裝套件時，請記得兩者套件版本要一致，否則可能會發生問題。</p>
<p>接著打開　工具＞Nuget套件管理員&gt;套件管理器主控台</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/fd6263e3-7315-43ba-b592-a3076b15027a/1597292040.png"></p>
<p>在主控台Consoel中就可以下指令：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/fd6263e3-7315-43ba-b592-a3076b15027a/1597292120.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scaffold-DbContext &quot;資料庫連線字串&quot; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Force -TableName -Tables 資料表</span><br></pre></td></tr></table></figure>

<p>Scaffold-DbContext 為剛剛安裝Tools套件的指令，雙引號後面就是放入該資料庫連線字串</p>
<p>-OutputDir 指定要輸出到專案的哪個資料夾，本文為Models資料夾</p>
<p>-Force 強制複寫，若Table欄位異動，會自動修改該Entity內的欄位</p>
<p>-Tables ，決定要將那些資料表轉成Entity。若有多張表要匯入，則需要以逗號區隔。</p>
<div style="color:red">
註:沒給-Tables參數的話，預設抓DB全部的Table
</div>
匯入成功後，會自動產生 CeptContxt物件。裡面會有Entity的欄位

<p>而在entity資料夾中，則會存放剛剛從Table轉出來Entity。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/fd6263e3-7315-43ba-b592-a3076b15027a/1597292632.png"></p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>EntityFrameWork</tag>
      </tags>
  </entry>
  <entry>
    <title>教你如何快速看懂 TCP/IP五層 網路封包</title>
    <url>/2020/07/27/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%9C%8B%E6%87%82-TCP-IP%E4%BA%94%E5%B1%A4-%E7%B6%B2%E8%B7%AF%E5%B0%81%E5%8C%85/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信有接觸過網路通訊、封包監控的讀者來說，對於封包的內容一定都不陌生</p>
<p>但是若有需要做到封包監控與封包過濾的話，讀懂每一個 Byte勢必是必經之路。</p>
<p>因為，只有真正讀懂每一個 Byte 在做什麼，才能夠透過程式進行過濾以及解析。</p>
<span id="more"></span>
<p>在文章開始之前，首先需要先請各位記住一個很重要的觀念：</p>
<blockquote>
<p><font color="red"> 每一層的Data欄位都是下一層以後的內容。</font><br><font color="red"> 每一層的Data欄位都是下一層以後的內容。</font><br><font color="red"> 每一層的Data欄位都是下一層以後的內容。</font></p>
</blockquote>
<p>這句話非常的重要，所以講了三遍來強調，因為懂了這個概念之後，會有助於我們日後可以寫程式去解析。</p>
<p>接下來的每一個部分，都會拆成各個章節來為各位做介紹：</p>
<h2 id="TCP-x2F-IP五層架構"><a href="#TCP-x2F-IP五層架構" class="headerlink" title="TCP&#x2F;IP五層架構"></a>TCP&#x2F;IP五層架構</h2><p>在了解網路封包時，我們需要先知道TCP&#x2F;IP的五層網路架構到底是分為哪五層，而每一層到底又做哪些事情。</p>
<p>這樣我們才能夠更快速地取得我們想要的資料。</p>
<p>筆者整理了以下表格方便讓大家快速看懂：</p>
<table>
<thead>
<tr>
<th>TCP&#x2F;IP層</th>
<th>介紹</th>
<th>網路設備</th>
<th>通訊協定</th>
</tr>
</thead>
<tbody><tr>
<td>應用層</td>
<td>任何的通訊協定、功能都會在此被定義</td>
<td>無</td>
<td>所有應用層的通訊協定在此定應</td>
</tr>
<tr>
<td>傳輸層</td>
<td>提供端點之間的Port用來做連結與確認</td>
<td>Switch</td>
<td>TCP、UDP</td>
</tr>
<tr>
<td>網路層</td>
<td>用來定義兩端點的IP位置</td>
<td>Router</td>
<td>IP、ICMP</td>
</tr>
<tr>
<td>資料連結層</td>
<td>定義兩端點的MAC地址</td>
<td></td>
<td>ARP、RARP</td>
</tr>
<tr>
<td>實體層</td>
<td>又稱物理層，走光電訊號（硬體）</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>從上表當中，我簡單為讀者做個說明：</p>
<p>實體層：由於走的是光電訊號，較偏硬體設備通訊，因此不在此討論。</p>
<p>資料連結層：主要是用來<font color="red">定義來源&#x2F;目的的MAC地址</font>，以及所使用的協定為何(IPV4&#x2F;IPV6)</p>
<p>網路層：主要是負責處理<font color="red">將封包由來源電腦傳給目的電腦之間的路徑選擇問題，因此會在此定義該封包需要送往哪一個IP位置。</font></p>
<p>傳輸層：主要提供系統間資料的傳輸更高階的控制，為了確保本層保證所有的資料都是以正確的順序送達，因此紀錄來源&#x2F;目的Port位置，<font color="red">此外亦會給每一個封包追蹤號碼，並在目的地進行檢查。</font></p>
<p>而在上方筆者用紅字標示的部分當中我們可以了解到每一層所執行的功能。<font color="red"> 當來源&#x2F;目的的MAC地址、IP位置、Port號都被定義後，就能將封包正確的送往目的地。 </font></p>
<h2 id="封包解析"><a href="#封包解析" class="headerlink" title="封包解析"></a>封包解析</h2><p>當我們用像是WireShark等其他軟體側錄封包內容時，大概會看到以下內容：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/0d0bca0b-d376-4656-a5e1-7337cdf2e21e/1553745858_86092.png"></p>
<p>這是一大長串的內容，裡面的內容都是採十六進位顯示，那我們該從何讀起呢？</p>
<p>其實Wireshark有很貼心的服務，當你點選封包上方的每一層時，它都會即時標示這一層的內容是從哪裡開始，到哪裡結束，並用藍底Mark起來。</p>
<p>資料連結層封包區段：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/0d0bca0b-d376-4656-a5e1-7337cdf2e21e/1553745971_56724.png"></p>
<p>網路層封包區段：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/0d0bca0b-d376-4656-a5e1-7337cdf2e21e/1553745985_32755.png"></p>
<p>傳輸層封包區段：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/0d0bca0b-d376-4656-a5e1-7337cdf2e21e/1553746000_75769.png"></p>
<p>應用層封包區段：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/0d0bca0b-d376-4656-a5e1-7337cdf2e21e/1553746025_23156.png"></p>
<p>眼尖的讀者們應該可以了解到，當逐層標示完後，最後一層也就是到封包的結尾做結束。</p>
<p>這也就是呼應了我們最一開始開頭的那句話：「每一層的Data欄位都是下一層以後的內容。」</p>
<p>對於每一層來說，它只管自己這一層所定義的欄位內容，其餘看不懂的、無法解析的，都會被視為是「資料」，</p>
<p>讓下一層看得懂的來去解析他。</p>
<p>一直到解析至傳輸層後，剩下的Data它看不懂了，那就輪到最後一層「應用層」來去做解析，也就是我們的Data資料。</p>
<p>因此不管是各位常見到的<code>HTTP</code>、<code>FTP</code>、<code>Telent</code>，甚至是工業控制系統常見的Modbus協定，都會被儲存在這最後一層，因為那就是我們所要的資料。</p>
<p>而到底每一層的封包的欄位各代表什麼意思呢？筆者上圖的封包作為範例，讓讀者能夠快速看懂。</p>
<p>下面的這個封包主要是一個Modbus TCP的封包，是我從工控系統中所側錄得到的。</p>
<p>但不管是何種通訊協定的封包，對於傳輸層來講，都只是data而已，所以並不影響。</p>
<p>另外，若是要取得封包內容，除了可以自己寫程式去側錄封包外，也可以利用像Wireshark等封包監控軟體進行側錄。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 18 23 3c 86 c6 00 18 23 3c d7 fb 08 00 45 00  </span><br><span class="line">00 3b 58 ac 00 00 ff 06 eb 0b c0 a8 7b 5a c0 a8  </span><br><span class="line">7b 59 35 81 01 f6 18 73 eb a1 52 d0 28 e7 50 18 </span><br><span class="line">02 00 b2 34 00 00 d7 fb 00 00 00 0d 01 10 10 03 </span><br><span class="line">00 03 06 09 cb 10 7e 03 94  </span><br></pre></td></tr></table></figure>

<p><strong>而在整個封包當中，是不包含實體層(L1)的內容的，因此我們從資料連結層(L2)開始介紹起。</strong></p>
<h2 id="資料連結層-L2-封包內容"><a href="#資料連結層-L2-封包內容" class="headerlink" title="資料連結層(L2)封包內容"></a>資料連結層(L2)封包內容</h2><p> 首先，對於資料傳輸層(L2)的封包，有以下內容： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 18 23 3c 86 c6 00 18 23 3c d7 fb 08 00</span><br></pre></td></tr></table></figure>

<p>其中，前8個Byte是來源MAC，後8個Byte是目的地MAC，最後兩個Byte則是定義採用哪一種網路協定，IPv4&#x2F;IPv6</p>
<p>因此表格由以下呈現，而資料連結層固定為14Byte。</p>
<table>
<thead>
<tr>
<th>來源MAC</th>
<th>目的MAC</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>00 18 23 3c 86 c6</td>
<td>00 18 23 3c d7 fb</td>
<td>08 00</td>
</tr>
</tbody></table>
<h2 id="網路層-L3-封包內容"><a href="#網路層-L3-封包內容" class="headerlink" title="網路層(L3)封包內容"></a>網路層(L3)封包內容</h2><p>首先，對於網路層(L3的封包，有以下內容： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">45 00 00 3b 58 ac 00 00 ff 06 eb 0b c0 a8 7b 5a c0 a8  </span><br><span class="line">7b 59</span><br></pre></td></tr></table></figure>
<p>在維基百科中，有表格闡述每一個Byte在做什麼。注：下圖內的數字是以bit來顯示<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/0d0bca0b-d376-4656-a5e1-7337cdf2e21e/1553757056_33792.png"></p>
<p>表格由以下呈現，而長度為不固定，需要透過Header來計算。</p>
<table>
<thead>
<tr>
<th>Type&amp;Header</th>
<th>Service</th>
<th>封包總長</th>
<th>識別碼</th>
<th>可否切割</th>
<th>存活時</th>
<th>協定</th>
<th>Check Sum</th>
<th>來源IP</th>
<th>目的IP</th>
<th>Data</th>
</tr>
</thead>
<tbody><tr>
<td>45</td>
<td>00</td>
<td>00 3b</td>
<td>58 ac</td>
<td>00 00</td>
<td>ff</td>
<td>06</td>
<td>eb 0b</td>
<td>c0 a8 7b 5a</td>
<td>c0 a8 7b 59</td>
<td></td>
</tr>
</tbody></table>
<p>接下來為各位解說常用的一些欄位在做什麼：</p>
<p>Type&amp;Header：該欄位佔1 Byte，主要由兩個欄位組成(Type、Header)。</p>
<p>Type 欄位占4bit，通訊雙方使用的Type必須一致。其中若使用IPv4，欄位的值是4。<br>Header欄位占4bit，用來定義網路層封包長度，但由於網路層的封包長度不固定，因此該欄位最小值為5，最大值為15，其中長度的計算為5*4&#x3D;20 (Byte) 即網路層長度為20<br>Service：該欄位佔1 Byte，一般的情況下都不使用這個欄位。只有在使用VoIP時才會被指用，因此預設值為 0 0 。</p>
<p>封包總長：該欄位佔2 Byte，用來表示整個封包長度(但不含 資料連結層 L2 )，即L3~L5的長度。</p>
<p>識別碼：該欄位佔 2 Byte，用來識別該連線的唯一識別碼（或是有過大的封包會被切割時，可以用該識別碼 識別切割的封包有哪些）。</p>
<p>可否切割：該欄位佔 2 Byte，若封包過大時，則會定義該封包可否被切格為等量的小封包進行傳送。</p>
<p>存活時間：該欄位佔 2 Byte，為了避免封包在網路中永遠存在（例如陷入路由環路），封包經過的每個路由器都將此欄位減1，當此欄位為0時，封包不再向下傳送並被丟棄，最大值是255。</p>
<p>協定：該欄位占 1 Byte，用來定義了該封包資料區使用的協定。</p>
<h2 id="傳輸層-L4-封包內容"><a href="#傳輸層-L4-封包內容" class="headerlink" title="傳輸層(L4)封包內容"></a>傳輸層(L4)封包內容</h2><p>首先，對於傳輸層(L4)的封包，有以下內容： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">35 81 01 f6 18 73 eb a1 52 d0 28 e7 50 18 </span><br><span class="line">02 00 b2 34 00 00</span><br></pre></td></tr></table></figure>
<p>在維基百科中，有表格闡述每一個Byte在做什麼。注：下圖內的數字是以bit來顯示</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/0d0bca0b-d376-4656-a5e1-7337cdf2e21e/1553758825_44461.png"></p>
<p>表格由以下呈現，而長度為不固定，需要透過flag來計算。</p>
<table>
<thead>
<tr>
<th>來源Port</th>
<th>目的Port</th>
<th>序列號</th>
<th>確認碼</th>
<th>flag</th>
<th>window size</th>
<th>check sum</th>
<th>緊急指標</th>
</tr>
</thead>
<tbody><tr>
<td>35 81</td>
<td>01 f6</td>
<td>18 73 eb a1</td>
<td>52 d0 28 e7</td>
<td>50 18</td>
<td>02 00</td>
<td>b2 34</td>
<td>00 00</td>
</tr>
</tbody></table>
<p>接下來為各位解說常用的一些欄位在做什麼：</p>
<p>序列號：用來識別該連線的編號，每增加一條連線，該序號就會+1</p>
<p>確認碼：期望收到的資料的開始序列號。也即已經收到的資料的位元組長度加1。</p>
<p>flag：該欄位由三個值組成。 </p>
<ul>
<li>第一個數值為定義整個傳輸層(L4)的封包長度，其中長度的計算為5*4&#x3D;20 (Byte) 即網路層長度為20。</li>
<li>資料偏移（4位元長）—以4位元組為單位計算出的資料段開始位址的偏移值。</li>
<li>保留（3位元長）—須置0</li>
<li>標誌符（9位元長）<ul>
<li>NS—ECN-nonce。</li>
<li>CWR—Congestion Window Reduced。</li>
<li>ECE—ECN-Echo有兩種意思，取決於SYN標誌的值。</li>
<li>URG—為1表示高優先級封包，緊急指標欄位有效。</li>
<li>ACK—為1表示確認號欄位有效</li>
<li>PSH—為1表示是帶有PUSH標誌的資料，指示接收方應該儘快將這個報文段交給應用層而不用等待緩衝區裝滿。</li>
<li>RST—為1表示出現嚴重差錯。可能需要重現建立TCP連接。還可以用於拒絕非法的報文段和拒絕連接請求。</li>
<li>SYN—為1表示這是連接請求或是連接接受請求，用於建立連接和使順序號同步</li>
<li>FIN—為1表示傳送方沒有資料要傳輸了，要求釋放連接</li>
</ul>
</li>
</ul>
<h2 id="應用層-L5-封包"><a href="#應用層-L5-封包" class="headerlink" title="應用層(L5)封包"></a>應用層(L5)封包</h2><p>而到最後一層，傳輸層解析不懂的內容，也就是我們所謂的「應用層」，在應用層當中，我們可以看到我們常見到的協定，如 HTTP、Telnet、FTP等，甚至是工業控制系統中的ModbusTCP協定，都會在這一層當中顯現。</p>
<p>至於該怎麼解析，那就必須交由該協定來去做定義。以上述範例來說，我擷取的是ModbusTCP的完整封包，因此最後解析下來的，就會是剩下ModbusTCP的部分。</p>
<p>因此接下來就必須要去找ModbusTCP的協定來去讀懂每個欄位所定義的內容了。</p>
<p>至於該如何解析並看懂ModbusTCP的封包，筆者有另外寫一篇文章作介紹，有興趣的讀者們可以參考看看。</p>
<h2 id="封包分層解析"><a href="#封包分層解析" class="headerlink" title="封包分層解析"></a>封包分層解析</h2><p>最後，當我們了解完每一層的封包欄位資訊後，再來就是需要透過程式的方式，去分析這一整包的資料，也同時針對整包的資料分層做解析。</p>
<p>但就像上文所說，網路層與傳輸層的大小並不固定，因此要如何確切的取得每一層的內容，可以參考以下方法：</p>
<p>首先當我們拿到整包封包資料後，我們需要先知道，只有資料連結層(L2)，固定為14Byte，其餘為不固定，因此我們需要透過「減法」的方式取得：</p>
<p>資料連結層(L2)：固定為14Byte，因此直接取前14Byte資料即可</p>
<p>網路層(L3)：由於<strong>資料長度不固定</strong>，但是我們可以透過Header欄位，我們將該欄位<em>4之後，即可得知L3長度為何。 (EX:最小值是5，因此5</em>4&#x3D;20，可得知長度為20 Byte)</p>
<p>傳輸層(L4)：由於<strong>資料長度不固定</strong>，但是我們可以透過flag欄位，我們將該欄位的第一個數字<em>4之後，即可得知L4長度為何。 (EX:最小值是5，因此5</em>4&#x3D;20，可得知長度為20 Byte)</p>
<p>應用層(L5)：最後一層的資料，也就是各位要解析的「資料」內容，我們可以透過 <strong>「減法」</strong>方式進行計算，將總長度減去 L2、L3、L4的長度，剩餘的資料就是應用層的資料了。</p>
<p>而至於為什麼要採用減法的方式來去將整個封包進行分層的原因，主要是因為從L2開始的封包，長度大小就不固定了，另外因為最終我們所想要監控到的資料，都是存在應用層(L5)，</p>
<p>因此裡面的不見得都是固定的長度，也不見得會有定義整個應用層的長度大小。</p>
<p>所以會建議採用減法的方式，將整個封包的內容，逐一將每一層的長度減去，那麼<strong>最終剩下的就會是應用層的內容</strong>。</p>
<p>以上就是整個封包監控的介紹，之後會再利用程式，再針對封包分析做更細部的介紹。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>TCP/IP封包</tag>
      </tags>
  </entry>
  <entry>
    <title>解決瀏覽器Same-origin policy 的問題</title>
    <url>/2017/05/14/%E8%A7%A3%E6%B1%BA%E7%80%8F%E8%A6%BD%E5%99%A8Same-origin-policy-%E7%9A%84%E5%95%8F%E9%A1%8C/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相信這個問題一直以來都困擾著開發者，因為很多時候我們不一定剛好可以都在Server上測試</p>
<p>很多時候我們可能只負責前端，而後端是其他人負責。當他們寫完WebApi 或是 WebService的時候就會上傳到測試Server上</p>
<p>那麼當我們在本地端撰寫的時候如果想要Request到網頁上就會有Same-origin policy 的問題要解決</p>
<p>好啦，我就是被雷的那一個，所以今天來跟大家談談Same-origin policy 的問題。</p>
<span id="more"></span>
<p>Same-origin policy 同源政策是瀏覽器為了防止Cross Domain存取資料所產生的一個限制</p>
<p>當你CrossDomain時瀏覽器會跳出通知告訴你：</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/fb774f00-340d-4e2d-8e68-143d3737bf95/1494726268_13117.png"></p>
<p>那…遇到這個問題該怎麼解決？我還是需要在本地端測試完才能夠上傳到測試Server上去做測試呀</p>
<p>所以這時候我們該如何允許Cross Domain來進行存取？</p>
<p>以WebApi為例：</p>
<p>我們可以在WebApi上加上這一段Attribute來告訴我們的瀏覽器說，我這一支API是可以提供給部分domain來存取的</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/fb774f00-340d-4e2d-8e68-143d3737bf95/1494726448_70018.png"></p>
<p>那，這是一種解法。只是因為筆者昨天在測試的時候，明明其他Post的方法是可以CrossDoamin來進行存取的</p>
<p>但是唯獨從前端 Post Json的格式，就會不給過。依然會跳出警示訊息。</p>
<p>當時筆者卡了這個問題卡了一個多小時，因為覺得自己已經加上了允許CrossDomain的Code了，沒有理由不行(而且其他的Post是可以執行的 EX:傳送x-www-form-urlencoded格式</p>
<p>所以自然不會去聯想到是這個問題，於是朝其他地方解決。</p>
<p>後來最後發現，果然還是Cross Domain的問題….。</p>
<p>因此如果上述的方法失效的時候，那我們該怎麼確保我們可以在不同的Domain底下存取資料呢？</p>
<p>我們就必須要從瀏覽器下手，把瀏覽器的安全性認證給關閉，如此一來就不會有這樣的問題發生了。</p>
<p>不過有一點需要非常注意：</p>
<blockquote>
<p>當Disable 瀏覽器的 Web Security 你的瀏覽器等同於沒有任何防護。因此很容易遭受攻擊，建議使用完就需要關閉。</p>
</blockquote>
<p>那以Chrome為例：<br>我們可以打開我們的Command Line 進行以下的輸入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//Mac OS:</span><br><span class="line">open -n -a /Applications/Google\ Chrome.app --args --user-data-dir=<span class="string">&quot;/tmp/someFolderName&quot;</span> --disable-web-security</span><br><span class="line"></span><br><span class="line">//Windows:</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot;</span> --disable-web-security</span><br></pre></td></tr></table></figure>
<p>如此一來就可以順利執行了。 那，如何查看自己有沒有成功呢？</p>
<p>當你打開後你的瀏覽器有跳出這樣的警示框就算成功了：<br><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/fb774f00-340d-4e2d-8e68-143d3737bf95/1494727395_38813.png"></p>
<font color="red">
切記，使用完一定要關閉，不要拿來瀏覽其他網站。
</font>

<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>WebAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>【CI CD實作】變更Jenkins家目錄(二)</title>
    <url>/2023/02/10/%E8%AE%8A%E6%9B%B4Jenkins%E5%AE%B6%E7%9B%AE%E9%8C%84(%E4%BA%8C)/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>根據上篇所述，由於我們的Jenkins預設是安裝在 &#x2F;var&#x2F;lib&#x2F;jenkins底下<br>而當時筆者遇到的狀況是，當時沒有注意到AWS的EC2空間快用滿了，而當安裝Jenkins後硬生生將硬碟空間吃到100%，以至於我們沒有多餘的空間可以進行其他操作。</p>
<p>因此本篇主要來介紹，當硬碟空間擴展後我們要如何搬遷位置，確保Jenkins有多餘的空間可以儲存。</p>
<span id="more"></span>


<p>首先我們需要前往Jenkins配置檔的位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/default/jenkins</span><br><span class="line"></span><br><span class="line">修改配置檔的JENKINS_HOME为自己想要的路徑，這邊我們安裝在/home底下</span><br><span class="line">JENKINS_HOME=/home/$NAME</span><br></pre></td></tr></table></figure>

<p>由於我們改變了jenkins的執行位置，因此需要將原本在 &#x2F;var&#x2F;lib&#x2F;jenkins 搬遷到 &#x2F;home&#x2F;jenkins</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sudo mkdir /home/jenkins</span><br><span class="line"></span><br><span class="line">sudo chown jenkins:jenkins /home/jenkins/</span><br><span class="line"> </span><br><span class="line">sudo cp /var/lib/jenkins/* /home/jenkins/ -rf</span><br></pre></td></tr></table></figure>

<p>由於執行路徑雖然在 &#x2F;home底下，但jenkins的預設家目錄仍然被記錄在 &#x2F;var&#x2F;lib底下，因此我們需要再輸入以下兩行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo usermod --home /home/jenkins jenkins </span><br><span class="line">sudo chown -R jenkins:jenkins /home/jenkins/</span><br></pre></td></tr></table></figure>

<p>最後重啟Jenkins就搞定了！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure>

<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>電商購物平台-信用卡刷卡串接(API授權方式)教學</title>
    <url>/2020/07/28/%E9%9B%BB%E5%95%86%E8%B3%BC%E7%89%A9%E5%B9%B3%E5%8F%B0-%E4%BF%A1%E7%94%A8%E5%8D%A1%E5%88%B7%E5%8D%A1%E4%B8%B2%E6%8E%A5-API%E6%8E%88%E6%AC%8A%E6%96%B9%E5%BC%8F-%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有鑑於購物車的電商系統一直是前端工程師最常見的SideProject之一。</p>
<p>但是許多人對於訂單成立後的結帳付款，卻不了解後續要做哪些事，以及有哪些常用的付款方式。</p>
<p>因此寫了一系列的介紹文，帶各位一窺全貌，了解電商平台在使用信用卡刷卡結帳時如何進行金流串接的。</p>
<p>本篇教學以中國信託的信用卡刷卡為教學範例。</p>
<span id="more"></span>

<h2 id="API授權方式"><a href="#API授權方式" class="headerlink" title="API授權方式"></a>API授權方式</h2><p>在上一篇教學中我們利用 URL授權的方式進行信用卡刷卡。</p>
<p>也就是卡號的輸入以及驗證均由該銀行提供。我們的購物系統本身不涉及刷卡驗證這段。</p>
<p>但若是需要進行退款,取消請款等操作，我們就需要透過API授權的方式才能進行操作。 因此本文會針對以中國信託為例，介紹如何進行退款，取消請款等動作。</p>
<p>信用卡刷卡請款的動作，一共分為兩個動作:</p>
<ol>
<li><pre><code> 交易後入請款檔
</code></pre>
</li>
<li><pre><code> 將請款檔內的帳務進行請款
</code></pre>
</li>
</ol>
<p>在上一篇URL授權當中，我們將<font color="red">AutoCap設定為1則代表刷卡交易後系統都會將該筆交易自動入中信的請款檔</font> ，也就是操作帳務管理後台的人員不需要將一筆一筆的交易設定入請款檔。只要等中國信託跑批次請款的時間到，該筆交易就會自動跟中國信託進行請款。</p>
<p>因此在執行退款動作的時候，並不會馬上進行退款，而是批次作業。</p>
<p>其中，在中國信託進行批次請款的時候，此時有將近兩個小時是不能針對請款檔內的帳務進行任何作業的，如：取消請款，取消退款等。</p>
<p>因此在設計上我們不能立刻將退款的訂單做處理，必須要有一個Buffer來儲存這些已經申請退款的訂購單。</p>
<p>為了確保每一張訂購單的退款都能妥善處理，我們的流程應該會是這樣：</p>
<ol>
<li><pre><code> 將所有要退款的訂購單，狀態設定為申請退款
</code></pre>
</li>
<li><pre><code> 利用排程定時(每隔1~2小時)將狀態為申請退款的單據進行退款
</code></pre>
</li>
<li><pre><code> 判斷該單據是否要進行取消訂單抑或是取消退款
</code></pre>
</li>
<li><pre><code> 執行退款相關API
</code></pre>
</li>
</ol>
<p>在第二點的流程中，如同上述提到，並不是任何時間我們都能夠操作中國信託的API進行帳款相關的操作。</p>
<p>因此我們需要利用排程定時去跑這些狀態為申請退款的訂購單，一旦操作成功將狀態更改為已退款。以確保單據不會重複操作。</p>
<p>第三點的流程中，操作退款的機制分為已請款以及已結帳兩個狀態，不同狀態下的帳款，在處理退款的行為上會有不同的流程。</p>
<p>因此流程上來說會分成兩種:</p>
<blockquote>
<p>已請款–&gt; CapRevTransac 取消轉入請款–&gt;AuthRevTransac 取消授權交易</p>
</blockquote>
<blockquote>
<p>已請款(請款成功) –&gt; Refund 呼叫退貨</p>
</blockquote>
<p>以第一種狀況來說，由於還沒有進行結帳請款，只是先將此筆交易放入請款檔內，等待中信的排程進行請款檔的批次處理。因此流程上只需要將該筆交易從請款檔移出，並且取消授權。那麼就可以結束這張訂單。</p>
<p>這裡有一點需要特別注意的地方是:<font color="red">取消授權的訂單，是不能在帳務後台再次進行請款的動作，因為這個授權的權利已經被取消了。</font></p>
<p>而第二種狀況的話，因為已經結帳請款，並將款項撥款給公司了。因此若要進行退款操作的話，那就需要額外輸入退款金額，並且只能進行退貨，不能取消授權。</p>
<p><font color="red">兩者的差異主要是該筆交易資料會不會顯示在刷卡人的帳單上</font>，若是第一種狀況的話，由於尚未進行結帳請款，因此可以將該筆交易退回，直接取消授權，那麼該筆交易公司就不會跟銀行進行請款，也就是說這筆交易並不存在，也就不會顯示在刷卡人的帳單中了。</p>
<p>反之，因為該筆款項已經轉入公司帳款，因此會出現刷卡紀錄，並且以刷退的方式沖銷，退回給銀行。總之，不管是哪一種方式，都不會使刷卡人無法退款。唯一要注意的是，由於第二種狀況會需要額外輸入退款金額，所以有可能因為公司退款政策而無法全部退款，而是返回的退款比例。</p>
<p>片段的程式碼如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTBCCredit ctbc = new CTBCCredit(ServerName, MerID , order.oid, result.XID, result.authAmt);</span><br><span class="line"></span><br><span class="line">  Inquiry inquiry = ctbc.queryOrder();</span><br><span class="line"></span><br><span class="line">  switch ((交易狀態)inquiry.CurrentState) &#123;</span><br><span class="line"></span><br><span class="line">     case 交易狀態.已請款:</span><br><span class="line"></span><br><span class="line">          ctbc.CapRev().Reversal();</span><br><span class="line">           logger.Info($&quot;訂單編號:&#123;order.oid&#125; 已轉出請款檔並取消授權&quot;);</span><br><span class="line"></span><br><span class="line">     break;</span><br><span class="line"></span><br><span class="line">     case 交易狀態.已請款_清算成功:</span><br><span class="line"></span><br><span class="line">          ctbc.RefundOrder(refundDiscount);</span><br><span class="line"></span><br><span class="line">          logger.Info($&quot;訂單編號:&#123;order.oid&#125; 已退款&quot;);</span><br><span class="line"></span><br><span class="line">     break;</span><br><span class="line"></span><br><span class="line">     default:</span><br><span class="line">        logger.Error($&quot;訂單編號:&#123;order.oid&#125;,訂單編號交易狀態有誤(&#123;inquiry.CurrentState&#125;)，無法退款&quot;);</span><br><span class="line">     break;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由於牽涉到一些公司機密，所以細節的部分的操作以及程式碼的部分沒辦法講得太仔細。</p>
<p>僅列出大方向的運作流程，搭配中國信託給的金流文件，快速了解整的脈絡。</p>
<p>因此若有讀者在實作中有問題，歡迎來信詢問。</p>
<p><font color="red"> 最後提醒一下，信用卡刷卡測試完成後，要開通正式環境需要約兩週的時間開通，並且只限定有開通的IP才能連到他們的正式主機 </font></p>
<p>這點還請注意一下。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>金流串接</category>
      </categories>
      <tags>
        <tag>信用卡刷卡串接</tag>
      </tags>
  </entry>
  <entry>
    <title>電商購物平台-信用卡刷卡串接(URL授權方式)教學</title>
    <url>/2020/07/28/%E9%9B%BB%E5%95%86%E8%B3%BC%E7%89%A9%E5%B9%B3%E5%8F%B0-%E4%BF%A1%E7%94%A8%E5%8D%A1%E5%88%B7%E5%8D%A1%E4%B8%B2%E6%8E%A5-URL%E6%8E%88%E6%AC%8A%E6%96%B9%E5%BC%8F-%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有鑑於購物車的電商系統一直是前端工程師最常見的SideProject之一。</p>
<p>但是許多人對於訂單成立後的結帳付款，卻不了解後續要做哪些事，以及有哪些常用的付款方式。</p>
<p>因此寫了一系列的介紹文，帶各位一窺全貌，了解電商平台在使用信用卡刷卡結帳時如何進行金流串接的。</p>
<span id="more"></span>

<p>本篇教學以中國信託的信用卡刷卡為教學範例。</p>
<p>信用卡刷卡付款的方式，又細分為兩種開發方式:</p>
<ul>
<li><p>URL授權方式</p>
</li>
<li><p>API授權方式</p>
</li>
</ul>
<h2 id="URL授權方式"><a href="#URL授權方式" class="headerlink" title="URL授權方式"></a>URL授權方式</h2><blockquote>
<p>URL授權方式，是使用銀行所提供的刷卡介面作為使用者卡號的輸入。</p>
</blockquote>
<p>這樣的方式我方不經手使用者信用卡刷卡的部分，所有卡號及到期日年月的輸入都在銀行的信用卡刷卡頁面操作，因此也就不會有儲存卡號的疑慮。</p>
<p>以中國信託刷卡為例:當進行信用卡刷卡結帳時，系統會自動跳轉到中信的刷卡介面，並在使用者輸入完卡號，授權碼以及手機的3D驗證後回傳刷卡結果。</p>
<p>因此整個流程會是這個樣子:</p>
<p><img src="https://lh3.googleusercontent.com/MVf29t_6NLqF3-fwgPh8978K8iYerK5hBEwaFel4uJ5Js4KErr6jsJihoOtKn6rUXBVCcSz5IRyNqAm4UjXyCXphPxQRXOBiPfYc-eF5wKySA9XP0HufdPG_vdZPtPrw27sAPQIo"></p>
<p>根據上圖的流程我們可以分為以下幾個步驟，以中國信託刷卡為例:</p>
<p>消費者刷卡結帳&#x3D;&gt;呼叫結帳API進行結帳&#x3D;&gt;產生刷卡頁URL給前端Redirect&#x3D;&gt;消費者填寫卡號與驗證碼&#x3D;&gt;驗證完成&#x3D;&gt;回傳成功&#x2F;失敗結果。</p>
<h2 id="產生刷卡頁URL"><a href="#產生刷卡頁URL" class="headerlink" title="產生刷卡頁URL"></a>產生刷卡頁URL</h2><ol>
<li>前端將訂單提交至後端API，在處理完訂單後，會使用中國信託提供的加密library 將特店編號、訂單編號、金額、壓碼等資料進行加密，再將參數帶入中信所提供的SSLAuthUI.jsp內，最終回傳給前端url進行Redirect。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Encrypt enc = new Encrypt();</span><br><span class="line"></span><br><span class="line">enc.MerchantID = MerchantID;</span><br><span class="line"></span><br><span class="line">enc.TerminalID = TerminalID;</span><br><span class="line"></span><br><span class="line">enc.OrderNo = OrderId;</span><br><span class="line"></span><br><span class="line">enc.AuthAmt = price;// 刷卡金額</span><br><span class="line"></span><br><span class="line">enc.TxType = &quot;0&quot;; // 交易方式 0 一般交易 1分期交易</span><br><span class="line"></span><br><span class="line">enc.AuthResURL = $&quot;&#123;apiUrl&#125;Order/Redirect/&#123;phone&#125;&quot;;//刷卡完   成後要導向的頁面</span><br><span class="line"></span><br><span class="line">enc.Key = Key;</span><br><span class="line"></span><br><span class="line">enc.MerchantName = &quot;購物平台&quot;;</span><br><span class="line"></span><br><span class="line">enc.AutoCap = &quot;1&quot;;// 是否自動入請款檔</span><br></pre></td></tr></table></figure>

<h2 id="填寫卡號資訊"><a href="#填寫卡號資訊" class="headerlink" title="填寫卡號資訊"></a>填寫卡號資訊</h2><ol start="2">
<li>在步驟一填完這些資訊後，會產生一組SSLAuthUI.jsp的URL，後面會帶上merID與URLEnc作為參數，返回給前端Redirect做卡號填寫。</li>
</ol>
<h2 id="回傳交易結果"><a href="#回傳交易結果" class="headerlink" title="回傳交易結果"></a>回傳交易結果</h2><ol start="3">
<li>使用者輸入完刷卡資訊後，中國信託會根據步驟一所填寫的AuthResURL 參數，呼叫我們填寫的API，並將刷卡後的結果回傳至API內。此時就可以根據刷卡後的交易結果判斷判斷，返回給前端的刷卡成功或失敗的頁面。</li>
</ol>
<p>到這裡刷卡交易的流程就結束了。</p>
<p>透過中國信託的信用卡授權頁，我們只需要判斷刷卡交易回傳的結果來決定要顯示給user成功&#x2F;失敗的頁面就行了。</p>
<p>至於退款、取消請款的功能就無法透過url授權的方式來完成，必須要透過API授權的方式才能完成此交易。</p>
<p>下一篇我們將講到信用卡刷卡串接API授權的方式：</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>金流串接</category>
      </categories>
      <tags>
        <tag>信用卡刷卡串接</tag>
      </tags>
  </entry>
  <entry>
    <title>電商購物平台-金流串接介紹</title>
    <url>/2020/07/28/%E9%9B%BB%E5%95%86%E8%B3%BC%E7%89%A9%E5%B9%B3%E5%8F%B0-%E9%87%91%E6%B5%81%E4%B8%B2%E6%8E%A5%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有鑑於購物車的電商系統一直是前端工程師最常見的SideProject之一。</p>
<p>但是許多人對於訂單成立後的結帳付款，卻不了解後續要做哪些事，以及有哪些常用的付款方式。</p>
<p>因此寫了一系列的介紹文，帶各位一窺全貌，了解電商平台在付款結帳時是如何進行金流串接的。</p>
<span id="more"></span>

<p>通常我們在做電商平台的時候，在最後購物車要進行結帳時都會遇到需要選擇付款方式來進行付款。而其中付款方式通常可以分為以下幾類:</p>
<blockquote>
<p>信用卡刷卡</p>
</blockquote>
<blockquote>
<p>虛擬帳戶轉帳</p>
</blockquote>
<blockquote>
<p>電子支付平台(如 pi錢包,Line pay 等)</p>
</blockquote>
<p><strong>每一種付款方式的開發都不太一樣，後續要做的事情也不同。</strong></p>
<p><strong>但不管如何最後都需要進行開立發票的動作。</strong></p>
<p><strong>因此整個流程會是</strong></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/58856ea2-f6ee-4b78-8d23-26b829451fe0/1596154540.png"></p>
<p>當訂單交易成立時，會根據所選擇的付款方式來決定要呼叫刷卡api或是產生虛擬帳號。</p>
<p>當付款流程成功後，就會進行電子發票開立，可以選擇使用財政部的TurnKey開立發票，或是串接電子發票加值服務中心進行發票開立。</p>
<p>因此金流付款與發票開立並無關係，是兩件獨立的事情。</p>
<p>接下來下一篇會針對信用卡刷卡的部分來介紹</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>金流串接</category>
      </categories>
      <tags>
        <tag>金流串接</tag>
      </tags>
  </entry>
  <entry>
    <title>電商購物平台-電子發票開立介紹</title>
    <url>/2020/07/28/%E9%9B%BB%E5%95%86%E8%B3%BC%E7%89%A9%E5%B9%B3%E5%8F%B0-%E9%9B%BB%E5%AD%90%E7%99%BC%E7%A5%A8%E9%96%8B%E7%AB%8B%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有鑑於購物車的電商系統一直是前端工程師最常見的SideProject之一。</p>
<p>但是許多人對於訂單成立後的結帳付款，卻不了解後續要做哪些事以及付款完成後，要如何開立發票等。</p>
<p>因此寫了一系列的介紹文，帶各位一窺全貌，了解電商平台在結帳時如何進行發票開立的。</p>
<span id="more"></span>

<p>在開始之前，有一個觀念需要先釐清：<font color="red">結帳付款與發票開立是兩個獨立的事件，並不影響彼此。 </font> </p>
<p>只是一般在電商平台結帳並付款完成後，會需要進行發票開立的作業。<br><font color="red"><br>發票開立的流程主要是跟財政部申請字軌發票號碼，會是一個區間:前兩碼為英文(稱之為字軌)，後面則是數字。</font></p>
<p>申請發票號碼時，例如申請 XB-46558200 ~ XB-46558299。</p>
<p>就代表申請了一百組的發票號碼，而這一百組的發票號碼就是給該單位做使用，其他人不能跟你搶這區間的發票號碼。<br></p>
<p>如下圖所示，發票號碼233，就是在XB-46558200 ~ XB-46558299之間的其中一組發票號碼。</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%91%A8%E6%94%BF%E8%BC%9D/de07a9c6-7698-4fd5-bec1-d924259268f2/1596080839.jpg"></p>
<p>這邊要注意的是，開出去的發票是不能取消的。若開錯品項，就需要將該發票進行作廢，並在開立一張新的發票號碼。</p>
<p>若仍想沿用原來舊的發票號碼，那麼就要同時進行作廢與註銷的動作。</p>
<p>其中，發票若跨期的話，則要改以折讓單進行開立。</p>
<p>簡單幫大家整理一下：</p>
<blockquote>
<p>取消發票(當期)&#x3D;&gt;作廢發票</p>
</blockquote>
<blockquote>
<p>取消發票(非當期)&#x3D;&gt;開立折讓單</p>
</blockquote>
<blockquote>
<p>重開發票(沿用原號碼) &#x3D;&gt; 作廢+註銷發票</p>
</blockquote>
<p>以上是發票在開立後可能會遇到的情況，對應的作法相關的發票文件會提供，這裡就不攢述了。</p>
<p>而在電商所開立的發票並不是像上圖一樣開立二聯式的紙本發票，而是改用雲端電子發票。</p>
<p>也由於消費者無法拿到實體的紙本發票，因此必須要有一個地方存放消費者過去消費的發票紀錄，並將開立的發票自動上傳到財政部，這個我們稱之為載具。</p>
<p>載具又有細分為:會員載具，手機條碼載具，信用卡及悠遊卡載具，自然人憑證等。</p>
<p>但不管是哪一種載具，都只是一個儲存的空間而已，去紀錄消費者過去的發票紀錄。</p>
<p>因此整個電子發票開立的步驟，需要執行以下幾步驟：</p>
<p><img src="/2020/07/28/%E9%9B%BB%E5%95%86%E8%B3%BC%E7%89%A9%E5%B9%B3%E5%8F%B0-%E9%9B%BB%E5%AD%90%E7%99%BC%E7%A5%A8%E9%96%8B%E7%AB%8B%E4%BB%8B%E7%B4%B9/process.png"></p>
<p>可以至<a href="https://einvoice.nat.gov.tw/ein_upload/html/ESQ/ESQ101W.html#step2">財政部官網</a>查看完整流程介紹，這邊簡單介紹每一步要做哪些事。</p>
<p>第一步的準備憑證指的是營業人憑證，也就是該營業機構必須要在財政部有資料登入，才知道是由哪個單位開立出來的發票</p>
<p>第二部則是透過財政部給的TurnKey(API)，或是找其他委外的電子發票加值服務中心進行發票開立作業。</p>
<p>Turnkey的申請流程複雜繁瑣且需要透過他們的軟體進行上傳。因此也可以委外的電子發票加值服務中心來進行申請。</p>
<p>目前有在財政部登記的<a href="https://www.einvoice.nat.gov.tw/index!showAddCenter?CSRT=15303897498494013429">電子發票加值中心</a>有以下廠商:</p>
<p><img src="/2020/07/28/%E9%9B%BB%E5%95%86%E8%B3%BC%E7%89%A9%E5%B9%B3%E5%8F%B0-%E9%9B%BB%E5%AD%90%E7%99%BC%E7%A5%A8%E9%96%8B%E7%AB%8B%E4%BB%8B%E7%B4%B9/vendor.png"></p>
<p>但若是串接電子發票加值服務中心的話，就不需要再串接財政部的API。</p>
<p>只需要跟加值中心串接即可。發票開立後，會自動在48小時內上傳至財政部。</p>
<font color="red">
兩種方法中，會建議直接串接電子發票加值服務中心會比較快，原因是加值中心可以提供會員載具功能

<p>同時也會幫我們去做字軌的管理，讓我們不需要知道目前發票號碼開立到哪，下一張的發票號碼為何。<br></p></font><p></p>
<p>至於如何使用程式碼進行發票的開立，在串接加值中心時，合作的加值中心廠商都會提供API文件給予串接，</p>
<p>因此在這邊就不做細部的發票開立作業的介紹。</p>
<p>也由於牽涉到一些公司機密，所以細節的部分的操作以及程式碼的部分沒辦法講得太仔細。</p>
<p>僅列出大方向的運作流程，只是提供一個初步的介紹，並搭配由電子發票加值服務中心的文件，快速了解整的脈絡。</p>
<p>若有讀者在實作中有問題，也歡迎來信詢問詳談，可以私下做詳細的教學。</p>
<div>
以上文章敘述如有錯誤及觀念不正確，請不吝嗇指教:)

<p>有任何家教、案子 或技術相關問題 請都歡迎聯繫我</p>
<p><a href="http://www.zhenghui.idv.tw/">http://www.zhenghui.idv.tw/</a></p>
</div>
]]></content>
      <categories>
        <category>金流串接</category>
      </categories>
      <tags>
        <tag>電子發票開立</tag>
      </tags>
  </entry>
</search>
